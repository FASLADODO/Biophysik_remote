classdef PatternAnalyzer < handle
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    %% BUGS
    %161004: no translation of vertical stripes
    %170317: possibility to choose the contrast model
    
    properties
        Pattern
        
        PatternWidth = 25
        PatternWidthMin = 1;
        PatternWidthMax = 200;
        
        PatternSpacing = 50
        PatternSpacingMin = 1;
        PatternSpacingMax = 200;
        
        PatternOrientation = 0
        PatternOrientationMin = -89.9;
        PatternOrientationMax = 90;
        
        PatternOffset = 0
        PatternOffsetMin = -100;
        PatternOffsetMax = 100;
        
        SeparatorWidth = 0
        SeparatorWidthMin = 0
        SeparatorWidthMax = 20
        
        ImgDIC
        ImgBait
        ImgPrey
        
        ROI = struct('Master',[],'Cell',[],'Pattern',[],'Separator',[],'Bait',struct('Pattern',[],'BG',[],'Otsu',[]),'Prey',struct('Pattern',[],'BG',[],'Otsu',[]))
        RoiPattern
        RoiCell
        RoiBG
        
        ImgHeight
        ImgWidth
        
        Intensity
    end %properties
    properties (SetObservable)
        MaskPattern
        MaskCell
        MaskBG
    end %properties
    properties(Transient)
        WorkPath
        
        DIC
        hAxDIC
        hImageDIC
        
        Bait = struct('Otsu',[])
        hImageBait
        
        Prey
        hImagePrey
        
        hAxMask
        hImageMask
        
        hFig
        hResultTable
        
        hDropdownModel
        hLiveUpdateToggle
    end %properties
    
    methods
        %constructor
        function this = PatternAnalyzer
            this.WorkPath = pwd;
            addpath(genpath(this.WorkPath))
            
            figPos = set_figure_position(3/2,0.85,'center');
            this.hFig = figure('Units','pixels',...
                'Name','PATTERN ANALYZER v1.3',...
                'NumberTitle', 'off',...
                'DockControls', 'off',...
                'MenuBar','none',...
                'Toolbar','none',...
                'Colormap',gray(256),...
                'Position',figPos);
            
            hPanelDicMaster = uipanel('Units','normalized','Position',[0 0 1/3 1],'backgroundcolor','w'); %DIC & MASK
            hPanelBaitMaster = uipanel('Units','normalized','Position',[1/3 0 1/3 1],'backgroundcolor','w'); %BAIT
            hPanelPreyMaster = uipanel('Units','normalized','Position',[2/3 0 1/3 1],'backgroundcolor','w'); %PREY
            
            %% DIC & MASK image
            hPanelDIC = uipanel(...
                'Parent',hPanelDicMaster,...
                'Units','normalized',...
                'backgroundcolor','k',...
                'Position',[0 1/2 1 1/2]);
            this.DIC.hToggleImage = uicontrol(...
                'Parent',hPanelDIC,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Image',...
                'Value',1,...
                'Callback', @(src,evnt)update_DIC(this));
            this.DIC.hTogglePattern = uicontrol(...
                'Parent',hPanelDIC,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [1/3 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Pattern',...
                'Value',0,...
                'Callback', @(src,evnt)update_DIC(this));
            this.DIC.hToggleCell = uicontrol(...
                'Parent',hPanelDIC,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [2/3 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Cell',...
                'Value',0,...
                'Callback', @(src,evnt)update_DIC(this));
            
            uicontrol(...
                'Parent',hPanelDIC,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 0 1 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Load DIC',...
                'Callback', @(src,evnt)load_DIC(this));
            this.hAxDIC = axes(...
                'Parent',hPanelDIC,...
                'Units','normalized',...
                'Position', [1/20 1/20 9/10 9/10],...
                'Box','on');
            this.hImageDIC = image(0,'Parent',this.hAxDIC);
            set(this.hAxDIC,'Xticklabel','','Yticklabel','')
            
            %% Cell ROI
            uicontrol(...
                'Parent', hPanelDicMaster,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 0.46 4/10 1/25],...
                'FontSize', 8,...
                'String', sprintf('ROI:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            uicontrol(...
                'Parent',hPanelDicMaster,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [8/10 0.46 2/10 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Crop',...
                'Callback', @(src,evnt)zoom_2_roi(this));
            uicontrol(...
                'Parent',hPanelDicMaster,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [4/10 0.46 2/10 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Define',...
                'Callback', @(src,evnt)set_master_roi(this));
            uicontrol(...
                'Parent',hPanelDicMaster,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [6/10 0.46 2/10 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Delete',...
                'Callback', @(src,evnt)del_master_roi(this));
            
            uicontrol(...
                'Parent', hPanelDicMaster,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 0.42 4/10 1/25],...
                'FontSize', 8,...
                'String', sprintf('Cell:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            uicontrol(...
                'Parent',hPanelDicMaster,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [4/10 0.42 3/10 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Define',...
                'Callback', @(src,evnt)set_cell_roi(this));
            uicontrol(...
                'Parent',hPanelDicMaster,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [7/10 0.42 3/10 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Delete',...
                'Callback', @(src,evnt)del_cell_roi(this));
            
            %% Pattern Settings
            hPanelPatternSettings = uipanel(...
                'Parent',hPanelDicMaster,...
                'Title','Pattern Settings:',...
                'TitlePosition','centertop',...
                'Units','normalized',...
                'FontUnits','normalized',...
                'FontSize',0.1,...
                'backgroundcolor','w',...
                'Position',[0 0.19 1 0.23]);
            uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 4/5 4/10 1/5],...
                'String', sprintf('Line Width [px]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.Pattern.Width.hSlider = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'slider',...
                'Units', 'normalized',...
                'Position', [4/10 4/5 4/10 1/5],...
                'Min', this.PatternWidthMin,...
                'Max', this.PatternWidthMax,...
                'Value', this.PatternWidth,...
                'SliderStep', [1/(this.PatternWidthMax-this.PatternWidthMin+1),...
                5/(this.PatternWidthMax-this.PatternWidthMin+1)]);
            addlistener(this.Pattern.Width.hSlider,'ContinuousValueChange',...
                @(src,event)set_pattern_width(this,src));
            this.Pattern.Width.hEdit = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [8/10 4/5 2/10 1/5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'String', this.PatternWidth,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_pattern_width(this,src));
            %----------------
            uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 3/5 4/10 1/5],...
                'FontSize', 8,...
                'String', sprintf('Line Spacing [px]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.Pattern.Spacing.hSlider = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'slider',...
                'Units', 'normalized',...
                'Position', [4/10 3/5 4/10 1/5],...
                'Min', this.PatternSpacingMin,...
                'Max', this.PatternSpacingMax,...
                'Value', this.PatternSpacing,...
                'SliderStep', [1/(this.PatternSpacingMax-this.PatternSpacingMin+1),...
                5/(this.PatternSpacingMax-this.PatternSpacingMin+1)]);
            addlistener(this.Pattern.Spacing.hSlider,'ContinuousValueChange',...
                @(src,event)set_pattern_spacing(this,src));
            this.Pattern.Spacing.hEdit = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [8/10 3/5 2/10 1/5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'String', this.PatternSpacing,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_pattern_spacing(this,src));
            %-----------------------
            uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 2/5 4/10 1/5],...
                'FontSize', 8,...
                'String', sprintf('Orientation [deg]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.Pattern.Orientation.hSlider = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'slider',...
                'Units', 'normalized',...
                'Position', [4/10 2/5 4/10 1/5],...
                'Min', this.PatternOrientationMin,...
                'Max', this.PatternOrientationMax,...
                'Value', this.PatternOrientation,....
                'SliderStep', [0.1/(this.PatternOrientationMax-this.PatternOrientationMin+1),...
                2/(this.PatternOrientationMax-this.PatternOrientationMin+1)]);
            addlistener(this.Pattern.Orientation.hSlider,'ContinuousValueChange',...
                @(src,event)set_pattern_orientation(this,src));
            this.Pattern.Orientation.hEdit = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [8/10 2/5 2/10 1/5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'String', this.PatternOrientation,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_pattern_orientation(this,src));
            %----------------------
            uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 1/5 4/10 1/5],...
                'FontSize', 8,...
                'String', sprintf('Translation [px]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.Pattern.Offset.hSlider = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'slider',...
                'Units', 'normalized',...
                'Position', [4/10 1/5 4/10 1/5],...
                'Min', this.PatternOffsetMin,...
                'Max', this.PatternOffsetMax,...
                'Value', this.PatternOffset,....
                'SliderStep', [1/(this.PatternOffsetMax-this.PatternOffsetMin+1),...
                5/(this.PatternOffsetMax-this.PatternOffsetMin+1)]);
            addlistener(this.Pattern.Offset.hSlider,'ContinuousValueChange',...
                @(src,event)set_pattern_offset(this,src));
            this.Pattern.Offset.hEdit = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [8/10 1/5 2/10 1/5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'String', this.PatternOffset,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_pattern_offset(this,src));
            %----------------------
            uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 0 4/10 1/5],...
                'FontSize', 8,...
                'String', sprintf('Separation [px]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.Pattern.Separator.hSlider = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'slider',...
                'Units', 'normalized',...
                'Position', [4/10 0 4/10 1/5],...
                'Min', this.SeparatorWidthMin,...
                'Max', this.SeparatorWidthMax,...
                'Value', this.SeparatorWidth,....
                'SliderStep', [2/(this.SeparatorWidthMax-this.SeparatorWidthMin+1),...
                4/(this.SeparatorWidthMax-this.SeparatorWidthMin+1)]);
            addlistener(this.Pattern.Separator.hSlider,'ContinuousValueChange',...
                @(src,event)set_separator_width(this,src));
            this.Pattern.Separator.hEdit = uicontrol(...
                'Parent', hPanelPatternSettings,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [8/10 0 2/10 1/5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'String', this.SeparatorWidth,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_separator_width(this,src));
            
            %%
            this.hResultTable = uitable(...
                'Parent',hPanelDicMaster,...
                'Units','normalized',...
                'FontUnits','normalized',...
                'SelectionHighlight','off',...
                'FontSize',0.1,...
                'Position',[0 0.01 1 0.18],...
                'RowName',{'Bait Cell','Bait Pattern','Prey Cell','Prey Pattern','Contrast'},...
                'ColumnName',{'N','25%','50%','75%','Asym.'},...
                'Data',nan(5,5));
            %             set(this.hResultTable,'ColumnWidth',...
            %                 {getpixelposition(this.hResultTable)/6-2})
            
            %%
            %             this.hAxMask = axes(...
            %                 'Parent',hPanelMaskMaster,...
            %                 'Units','normalized',...
            %                 'Position', [1/10 1/10 8/10 8/10],...
            %                 'Box','on');
            %             this.hImageMask = image(0,'Parent',this.hAxMask);
            %             set(this.hAxMask,'Xticklabel','','Yticklabel','')
            
            %% BAIT image
            this.Bait.hPanel = uipanel(...
                'Parent',hPanelBaitMaster,...
                'Units','normalized',...
                'backgroundcolor','k',...
                'Position',[0 1/2 1 1/2]);
            this.Bait.hTogglePattern = uicontrol(...
                'Parent',this.Bait.hPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [2/3 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Pattern',...
                'Value',1,...
                'Callback', @(src,evnt)update_bait(this));
            this.Bait.hToggleCell = uicontrol(...
                'Parent',this.Bait.hPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [1/3 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Cell',...
                'Value',1,...
                'Callback', @(src,evnt)update_bait(this));
            this.Bait.hToggleBG = uicontrol(...
                'Parent',this.Bait.hPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show BG',...
                'Value',1,...
                'Callback', @(src,evnt)update_bait(this));
            uicontrol(...
                'Parent',this.Bait.hPanel,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 0 1 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Load Bait Channel',...
                'Callback', @(src,evnt)load_bait(this));
            this.Bait.hAx = axes(...
                'Parent',this.Bait.hPanel,...
                'Units','normalized',...
                'Position', [1/20 1/20 9/10 9/10],...
                'Box','on');
            this.Bait.hImage = image(0,'Parent',this.Bait.hAx);
            set(this.Bait.hAx,'Xticklabel','','Yticklabel','')
            
            uicontrol(...
                'Parent',hPanelBaitMaster,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0 0.46 1/5 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Set BG',...
                'Callback', @(src,evnt)set_BG_roi(this,src,'Bait'));
            
            this.Bait.hCorrHetToggle = uicontrol(...
                'Parent',hPanelBaitMaster,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [1/5 0.46 4/5 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Correct Pattern Heterogeneity',...
                'Callback', @(src,evnt)correct_pattern_heterogeneity(this,'Bait'));
            
            %            this.Bait.hCorrHetEdit = uicontrol(...
            %                 'Parent', hPanelBaitMaster,...
            %                 'Style', 'Edit',...
            %                 'Enable','inactive',...
            %                 'Units','normalized',...
            %                 'Position', [0.6 0.46 0.4 1/25],...
            %                 'FontSize', 8,...
            %                 'String', sprintf('p-Value = '),...
            %                 'FontUnits','normalized',...
            %                 'FontSize',0.5,...
            %                 'backgroundcolor','w',...
            %                 'HorizontalAlignment', 'center');
            
            %
            this.Bait.hResultPanel = uipanel(...
                'Parent',hPanelBaitMaster,...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[0 0 1 0.46]);
            this.Bait.hProfileAx = axes(...
                'Parent',this.Bait.hResultPanel,...
                'Units','normalized',...
                'OuterPosition', [0 1/2 1 1/2],...
                'Box','on');
            this.Bait.hHistAx = axes(...
                'Parent',this.Bait.hResultPanel,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1/2],...
                'Box','on');
            
            %% PREY Image
            this.Prey.hPanel = uipanel(...
                'Parent',hPanelPreyMaster,...
                'Units','normalized',...
                'backgroundcolor','k',...
                'Position',[0 1/2 1 1/2]);
            this.Prey.hTogglePattern = uicontrol(...
                'Parent',this.Prey.hPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [2/3 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Pattern',...
                'Value',1,...
                'Callback', @(src,evnt)update_prey(this));
            this.Prey.hToggleCell = uicontrol(...
                'Parent',this.Prey.hPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [1/3 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show Cell',...
                'Value',1,...
                'Callback', @(src,evnt)update_prey(this));
            this.Prey.hToggleBG = uicontrol(...
                'Parent',this.Prey.hPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0 19/20 1/3 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Show BG',...
                'Value',1,...
                'Callback', @(src,evnt)update_prey(this));
            uicontrol(...
                'Parent',this.Prey.hPanel,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 0 1 1/20],...
                'FontUnits','normalized',...
                'FontSize', 0.8,...
                'String', 'Load Prey Channel',...
                'Callback', @(src,evnt)load_prey(this));
            this.Prey.hAx = axes(...
                'Parent',this.Prey.hPanel,...
                'Units','normalized',...
                'Position', [1/20 1/20 9/10 9/10],...
                'Box','on');
            this.Prey.hImage = image(0,'Parent',this.Prey.hAx);
            set(this.Prey.hAx,'Xticklabel','','Yticklabel','')
            
            uicontrol(...
                'Parent',hPanelPreyMaster,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0 0.46 1/5 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Set BG',...
                'Callback', @(src,evnt)set_BG_roi(this,src,'Prey'));
            
            this.Prey.hCorrHetToggle = uicontrol(...
                'Parent',hPanelPreyMaster,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [1/5 0.46 4/5 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Correct Pattern Heterogeneity',...
                'Callback', @(src,evnt)correct_pattern_heterogeneity(this,'Prey'));
            
            %
            this.Prey.hResultPanel = uipanel(...
                'Parent',hPanelPreyMaster,...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[0 0 1 0.46]);
            %
            this.Prey.hProfileAx = axes(...
                'Parent',this.Prey.hResultPanel,...
                'Units','normalized',...
                'OuterPosition', [0 1/2 1 1/2],...
                'Box','on');
            %
            %             uicontrol(...
            %                 'Parent',this.Intensity.hPanel,...
            %                 'Style', 'pushbutton',...
            %                 'Units','normalized',...
            %                 'Position', [6/10 9.5/10 3/10 1/30],...
            %                 'FontUnits','normalized',...
            %                 'FontSize', 0.5,...
            %                 'String', 'Prey Heterogeneity',...
            %                 'Callback', @(src,evnt)est_Prey_heterogeneity(this,src));
            this.Prey.hHistAx = axes(...
                'Parent',this.Prey.hResultPanel,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1/2],...
                'Box','on');
            
            this.hLiveUpdateToggle = uicontrol(...
                'Parent',hPanelDicMaster,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0.8 0 0.2 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Update',...
                'Callback', @(src,evnt)update_mask_pattern(this));
%             uicontrol(...
%                 'Parent',hPanelDicMaster,...
%                 'Style', 'pushbutton',...
%                 'Units','normalized',...
%                 'Position', [1/3 0 1/3 1/25],...
%                 'FontUnits','normalized',...
%                 'FontSize', 0.5,...
%                 'String', 'Export All Results',...
%                 'Callback', @(src,evnt)export_results(this));
            
            uicontrol(...
                'Parent', hPanelDicMaster,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 0 0.35 1/25],...
                'FontSize', 8,...
                'String', sprintf('Contrast Model:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            
            this.hDropdownModel = uicontrol_popupmenu_wrapper(...
                'Parent',hPanelDicMaster,...
                'Units','normalized',...
                'Position', [0.35 0 0.45 1/25],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String',{'No normalization','Bait Contrast','Bait Specificity'},...
                'Value',3,...
                'TooltipString','Select the applied contrast model.',...
                'Callback', @(src,evnt)update_contrast(this));
            
            %%
            set(this.hFig,...
                'ResizeFcn',@(src,evnt)respond_2_fig_resize(this))
            
            linkaxes([this.hAxDIC,this.Bait.hAx,this.Prey.hAx,this.hAxMask])
            
            %%
            hToolbar = uitoolbar(...
                'Parent',this.hFig);
            uitoggletool(...
                'Parent', hToolbar,...
                'Tag','Zoom',...
                'TooltipString','Zoom',...
                'CData', reshape([NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN 0 0 0 0 0 0 NaN 0 0 0 0 0 NaN 0 NaN NaN 0 0 1 1 0 0 NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 1 1 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN 0 0 0 0 0 0 NaN 0 0 0 0 0 NaN 0 NaN NaN 0 0 1 1 0 0 NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 1 1 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN 0 0 0 0 0 0 NaN 0 0 0 0 0 NaN 0 NaN NaN 0 0 1 1 0 0 NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 1 1 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0.500000000000000 NaN NaN NaN NaN],[16 16 3]),...
                'ClickedCallback', @(src,evnt)set_zoom(src,'hFig',this.hFig));
            uitoggletool(...
                'Parent', hToolbar,...
                'Tag','Pan',...
                'TooltipString','Pan',...
                'CData', reshape([NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN],[16 16 3]),...
                'ClickedCallback', @(src,evnt)set_pan(src,'hFig',this.hFig));
            uipushtool(...
                'Parent', hToolbar,...
                'TooltipString','Save Results',...
                'CData', reshape([NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 NaN 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN 0 NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.630000000000000 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0.310000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN NaN 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 NaN 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN 0 NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.630000000000000 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0.310000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN NaN 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 NaN 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN 0 NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.630000000000000 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0.310000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN NaN 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0],[16 16 3]),...
                'Separator','on',...
                'ClickedCallback',@(src,evnt)export_results(this));
        end %fun
        function respond_2_fig_resize(this)
            %             set(this.hResultTable,'units','pixels')
            %             ext = get(this.hResultTable,'Extent');
            %             set(this.hResultTable,'units','normalized')
            pos = getpixelposition(this.hResultTable);
            set(this.hResultTable,'ColumnWidth',...
                {(pos(3))/6-15})
        end %fun
        
        %%
        function load_DIC(this)
            [fileName,filePath,isOK] = uigetfile('.tif','Load DIC Channel',this.WorkPath);
            if isOK
                fileImg = fullfile(filePath,fileName);
                this.WorkPath = filePath;
                
                this.ImgDIC = double(imread(fileImg,1));
                if isempty(this.ROI.Master)
                    this.DIC.ImgNorm = norm2quantile(this.ImgDIC,[0.01 0.99]);
                    [this.ImgHeight,this.ImgWidth] = size(this.ImgDIC);
                else
                    crop_DIC(this)
                end %if
                
                update_mask_pattern(this)
                %             set(this.hAxDIC,...
                %                 'Xlim',[0 this.ImgWidth]+0.5,...
                %                 'Ylim',[0 this.ImgHeight]+0.5)
                axis(this.hAxDIC,'image')
            end %if
        end %fun
        function load_bait(this)
            [fileName,filePath,isOK] = uigetfile('.tif','Load Bait Channel',this.WorkPath);
            if isOK
                fileImg = fullfile(filePath,fileName);
                this.WorkPath = filePath;
                
                this.ImgBait = double(imread(fileImg,1));
                if isempty(this.ROI.Master)
                    this.Bait.ImgNorm = norm2quantile(this.ImgBait,[0.01 0.99]);
                    [this.ImgHeight,this.ImgWidth] = size(this.ImgBait);
                else
                    crop_bait(this)
                end %if
                
                update_mask_pattern(this)
                %             set(this.Bait.hAx,...
                %                 'Xlim',[0 this.ImgWidth]+0.5,...
                %                 'Ylim',[0 this.ImgHeight]+0.5)
                axis(this.Bait.hAx,'image')
            end %if
        end %fun
        function load_prey(this)
            [fileName,filePath,isOK] = uigetfile('.tif','Load Prey Channel',this.WorkPath);
            if isOK
                fileImg = fullfile(filePath,fileName);
                this.WorkPath = filePath;
                
                this.ImgPrey = double(imread(fileImg,1));
                if isempty(this.ROI.Master)
                    this.Prey.ImgNorm = norm2quantile(this.ImgPrey,[0.01 0.99]);
                    [this.ImgHeight,this.ImgWidth] = size(this.ImgPrey);
                else
                    crop_prey(this)
                end %if
                
                update_mask_pattern(this)
                %             set(this.Prey.hAx,...
                %                 'Xlim',[0 this.ImgWidth]+0.5,...
                %                 'Ylim',[0 this.ImgHeight]+0.5)
                axis(this.Prey.hAx,'image')
            end %if
        end %fun
        
        %%
        function set_pattern_width(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = round(get(src,'Value'));
                case 'edit'
                    value = round(str2double(get(src,'String')));
            end %switch
            value = min(this.PatternWidthMax,max(this.PatternWidthMin,value));
            
            if value ~= this.PatternWidth
                this.PatternWidth = value;
                set(this.Pattern.Width.hEdit,'String',value)
                set(this.Pattern.Width.hSlider,'Value',value)
                
                update_mask_pattern(this)
            end %if
        end %fun
        function set_pattern_spacing(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = round(get(src,'Value'));
                case 'edit'
                    value = round(str2double(get(src,'String')));
            end %switch
            value = min(this.PatternSpacingMax,max(this.PatternSpacingMin,value));
            
            if value ~= this.PatternSpacing
                this.PatternSpacing = value;
                set(this.Pattern.Spacing.hEdit,'String',value)
                set(this.Pattern.Spacing.hSlider,'Value',value)
                
                update_mask_pattern(this)
            end %if
        end %fun
        function set_pattern_orientation(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = get(src,'Value');
                case 'edit'
                    value = str2double(get(src,'String'));
            end %switch
            value = round(value*10)/10;
            value = min(this.PatternOrientationMax,max(this.PatternOrientationMin,value));
            
            if value ~= this.PatternOrientation
                this.PatternOrientation = value;
                set(this.Pattern.Orientation.hEdit,'String',value)
                set(this.Pattern.Orientation.hSlider,'Value',value)
                
                update_mask_pattern(this)
            end %if
        end %fun
        function set_pattern_offset(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = round(get(src,'Value'));
                case 'edit'
                    value = round(str2double(get(src,'String')));
            end %switch
            value = min(this.PatternOffsetMax,max(this.PatternOffsetMin,value));
            
            if value ~= this.PatternOffset
                this.PatternOffset = value;
                set(this.Pattern.Offset.hEdit,'String',value)
                set(this.Pattern.Offset.hSlider,'Value',value)
                
                update_mask_pattern(this)
            end %if
        end %fun
        function set_separator_width(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = round(get(src,'Value'));
                case 'edit'
                    value = round(str2double(get(src,'String')));
            end %switch
            value = min(this.SeparatorWidthMax,max(this.SeparatorWidthMin,value));
            
            if value ~= this.SeparatorWidth
                this.SeparatorWidth = value;
                set(this.Pattern.Separator.hEdit,'String',value)
                set(this.Pattern.Separator.hSlider,'Value',value)
                
                update_mask_pattern(this)
            end %if
        end %fun
        
        %%
        function set_master_roi(this)
            switch generate_polynomial_decision_dialog('',{'Choose Image to define ROI.'},{'DIC','Bait','Prey'})
                case 'DIC'
                    hAx = this.hAxDIC;
                case 'Bait'
                    hAx = this.Bait.hAx;
                case 'Prey'
                    hAx = this.Prey.hAx;
            end %switch
            this.ROI.Master = PatternAnalyzer.set_roi(hAx);
            
            update_mask_pattern(this)
        end %fun
        function del_master_roi(this)
            this.ROI.Master = [];
            update_mask_pattern(this)
        end %fun
        
        function set_cell_roi(this)
            switch generate_polynomial_decision_dialog('',{'Choose Image to define Cell.'},{'DIC','Bait','Prey'})
                case 'DIC'
                    hAx = this.hAxDIC;
                case 'Bait'
                    hAx = this.Bait.hAx;
                case 'Prey'
                    hAx = this.Prey.hAx;
            end %switch
            this.ROI.Cell = PatternAnalyzer.set_roi(hAx);
            
            update_mask_pattern(this)
        end %fun
        function del_cell_roi(this)
            this.ROI.Cell = [];
            update_mask_pattern(this)
        end %fun
        
        function set_BG_roi(this,src,channel)
            switch get(src,'Value')
                case 1
                    switch channel
                        case 'Bait'
                            hAx = this.Bait.hAx;
                        case 'Prey'
                            hAx = this.Prey.hAx;
                    end %switch
                    this.ROI.(channel).BG = PatternAnalyzer.set_roi(hAx);
                case 0
                    this.ROI.(channel).BG = [];
            end %switch
            update_mask_pattern(this)
        end %fun
        function del_BG_roi(this,channel)
            this.ROI.(channel).BG = [];
            update_mask_pattern(this)
        end %fun
        
        function zoom_2_roi(this)
            if not(isempty(this.ROI.Master))
                %                 axis([this.ROI.Master.RectHull])
                
                this.ImgHeight = this.ROI.Master.RectHull(4)-this.ROI.Master.RectHull(3)+1;
                this.ImgWidth = this.ROI.Master.RectHull(2)-this.ROI.Master.RectHull(1)+1;
                
                this.ROI.Master.Mask = ones(this.ImgHeight,this.ImgWidth);
                this.ROI.Master.BoundaryMask = MOV_crop_rect(this.ROI.Master.BoundaryMask,...
                    this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                if not(isempty(this.ROI.Cell))
                    this.ROI.Cell.Mask = MOV_crop_rect(this.ROI.Cell.Mask,...
                        this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                end %if
                
                crop_DIC(this)
                crop_bait(this)
                crop_prey(this)
                
                update_mask_pattern(this)
                
                axis(this.hAxDIC,'image')
                axis(this.Bait.hAx,'image')
                axis(this.hAxDIC,'image')
            end %if
        end %fun
        function crop_DIC(this)
            if not(isempty(this.ImgDIC))
                this.ImgDIC = MOV_crop_rect(this.ImgDIC,...
                    this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                this.DIC.ImgNorm = norm2quantile(this.ImgDIC,[0.01 0.99]);
            end
        end %fun
        function crop_bait(this)
            if not(isempty(this.ImgBait))
                this.ImgBait = MOV_crop_rect(this.ImgBait,...
                    this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                this.Bait.ImgNorm = norm2quantile(this.ImgBait,[0.01 0.99]);
                
                if not(isempty(this.ROI.Bait.Otsu))
                    this.ROI.Bait.Otsu.Mask = MOV_crop_rect(this.ROI.Bait.Otsu.Mask,...
                        this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                end %if
            end
        end %fun
        function crop_prey(this)
            if not(isempty(this.ImgPrey))
                this.ImgPrey = MOV_crop_rect(this.ImgPrey,...
                    this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                this.Prey.ImgNorm = norm2quantile(this.ImgPrey,[0.01 0.99]);
                
                if not(isempty(this.ROI.Prey.Otsu))
                    this.ROI.Prey.Otsu.Mask = MOV_crop_rect(this.ROI.Prey.Otsu.Mask,...
                        this.ROI.Master.RectHull,'Mode','[x0 X y0 Y]');
                end %if
            end
        end %fun
        
        %%
        function update_mask_pattern(this)
            %             profile on
            if not(isempty(this.ImgHeight)) && not(isempty(this.ImgWidth))
                [this.ROI.Pattern.Mask, this.ROI.Separator.Mask] = ...
                    PatternAnalyzer.gen_mask_pattern(...
                    this.ImgHeight, this.ImgWidth,...
                    this.PatternWidth,...
                    this.PatternSpacing,...
                    this.PatternOrientation,...
                    this.PatternOffset,...
                    this.SeparatorWidth);
                
                update_DIC(this)
                update_bait(this)
                update_prey(this)
                
                update_contrast(this)
            end %if
            %             profile viewer
        end %fun
        
        function update_DIC(this)
            if any([not(isempty(this.ImgDIC)),not(isempty(this.ImgBait)),not(isempty(this.ImgPrey))])
                showMask = [get(this.DIC.hTogglePattern,'Value'),...
                    get(this.DIC.hToggleCell,'Value'),...
                    get(this.DIC.hToggleImage,'Value')];
                %                 if any(showMask)
                if isempty(this.ImgDIC)
                    img = ones(this.ImgHeight,this.ImgWidth);
                else
                    img = this.DIC.ImgNorm;
                end %if
                
                if all(not(showMask))
                    set(this.hImageDIC,...
                        'Cdata',false(this.ImgHeight,this.ImgWidth))
                else
                    if all(not(showMask(1:2)))
                        set(this.hImageDIC,...
                            'Cdata',repmat(this.DIC.ImgNorm,[1 1 3]))
                    else
                        if showMask(3)
                            set(this.hImageDIC,'Cdata',cat(3,...
                                0.5*img + 0.5*showMask(1)*get_DIC_pattern_mask(this),...
                                0.5*img + 0.5*showMask(2)*get_DIC_cell_mask(this),...
                                0.5*img + 0.5*get_DIC_master_mask(this)))
                        else
                            set(this.hImageDIC,'Cdata',cat(3,...
                                showMask(1)*get_DIC_pattern_mask(this),...
                                showMask(2)*get_DIC_cell_mask(this),...
                                get_DIC_master_mask(this)))
                        end %if
                    end %if
                end %if
            end %if
        end %fun
        function mask = get_DIC_pattern_mask(this)
            mask = this.ROI.Pattern.Mask & not(this.ROI.Separator.Mask);
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
            
            if not(isempty(this.ROI.Cell))
                mask = mask & this.ROI.Cell.Mask;
            end %if
        end %fun
        function mask = get_DIC_cell_mask(this)
            if isempty(this.ROI.Cell)
                mask = true(this.ImgHeight,this.ImgWidth);
            else
                mask = this.ROI.Cell.Mask & not(this.ROI.Pattern.Mask) & not(this.ROI.Separator.Mask);
            end %if
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
        end %if
        function mask = get_DIC_master_mask(this)
            if isempty(this.ROI.Master)
                mask = true(this.ImgHeight,this.ImgWidth);
            else
                mask = this.ROI.Master.BoundaryMask;
            end %if
        end %fun
        
        %%
        function correct_pattern_heterogeneity(this,target)
            switch target
                case 'Bait'
                    est_bait_heterogeneity(this)
                    update_bait(this)
                case 'Prey'
                    est_prey_heterogeneity(this)
                    update_prey(this)
            end %switch
            update_contrast(this)
        end %fun
        
        %%
        function update_bait(this)
            if not(isempty(this.ImgBait))
                showMask = [get(this.Bait.hTogglePattern,'Value'),...
                    get(this.Bait.hToggleCell,'Value'),...
                    get(this.Bait.hToggleBG,'Value')];
                if any(showMask)
                    img = this.Bait.ImgNorm;
                    set(this.Bait.hImage,'Cdata',cat(3,...
                        0.7*img + 0.3*showMask(1)*get_bait_pattern_mask(this),...
                        0.8*img + 0.2*showMask(2)*get_bait_cell_mask(this),...
                        0.8*img + 0.2*showMask(3)*get_bait_BG_mask(this)))
                else
                    set(this.Bait.hImage,...
                        'Cdata',repmat(this.Bait.ImgNorm,[1 1 3]))
                end %if
                %                 axis(this.Bait.hAx,'image')
                
                update_bait_intensity_hist(this)
                update_bait_orth_profile(this)
                
                if get(this.hLiveUpdateToggle,'Value')
                    data = get(this.hResultTable,'Data');
                    numPxCell = sum(mat2vec(get_bait_cell_mask(this)));
                    numPxPattern = sum(mat2vec(get_bait_pattern_mask(this)));
                    data(1:2,:) = [...
                        [numPxCell;numPxPattern],...
                        round([[get_percentile(this.Bait.objIntDist,2,0.25),...
                        get_percentile(this.Bait.objIntDist,2,0.5),...
                        get_percentile(this.Bait.objIntDist,2,0.75)];...
                        [get_percentile(this.Bait.objIntDist,3,0.25),...
                        get_percentile(this.Bait.objIntDist,3,0.5),...
                        get_percentile(this.Bait.objIntDist,3,0.75)]]),...
                        [round(get_skewness(this.Bait.objIntDist,2)/sqrt(54/numPxCell)*100);...
                        round(get_skewness(this.Bait.objIntDist,3)/sqrt(54/numPxPattern)*100)]];
                    set(this.hResultTable,'Data',data);
                else
                    set(this.hResultTable,'Data',nan(5));
                end %if
            end %if
        end %fun
        function mask = get_bait_pattern_mask(this)
            mask = this.ROI.Pattern.Mask & not(this.ROI.Separator.Mask);
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
            
            if not(isempty(this.ROI.Cell))
                mask = mask & this.ROI.Cell.Mask;
            end %if
            
            if not(isempty(this.ROI.Bait.Otsu))
                mask = mask & this.ROI.Bait.Otsu.Mask;
            end %if
        end %fun
        function mask = get_bait_cell_mask(this)
            if isempty(this.ROI.Cell)
                mask = not(this.ROI.Pattern.Mask);
            else
                mask = this.ROI.Cell.Mask & not(this.ROI.Pattern.Mask) & not(this.ROI.Separator.Mask);
            end %if
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
        end %fun
        function mask = get_bait_BG_mask(this)
            if isempty(this.ROI.Bait.BG)
                mask = not(this.ROI.Pattern.Mask) & not(this.ROI.Separator.Mask);
            else
                mask = this.ROI.Bait.BG.Mask;
            end %if
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
            
            if not(isempty(this.ROI.Cell))
                if this.SeparatorWidth > 0
                    SE = zeros(2*this.SeparatorWidth+1);
                    SE(this.SeparatorWidth+1,:) = 1;
                    SE(:,this.SeparatorWidth+1) = 1;
                    mask = mask & not(imdilate(this.ROI.Cell.Mask,SE));
                else
                    mask = mask & not(this.ROI.Cell.Mask);
                end %if
            end %if
        end %fun
        
        function update_bait_orth_profile(this)
            cla(this.Bait.hProfileAx)
            
            if get(this.hLiveUpdateToggle,'Value')
                %             vertAlign = single(cat(3,this.MaskPattern,this.ROI.Cell.Mask,this.MaskBG,this.ImgBait,this.ImgPrey));
                %             theta = (-this.PatternOrientation-90)/180*pi;
                %             T = [cos(theta) -sin(theta) 0; sin(theta) cos(theta) 0; 0 0 1];
                %             tform = maketform('affine', T);
                %            vertAlign = imtransform(vertAlign,tform);
                
                
                %             imrotate(uint16(ones(this.ImgHeight,1)*(1:this.ImgWidth)),this.PatternOrientation-90,'nearest')
                
                maskBG = imrotate(single(get_bait_BG_mask(this)),-this.PatternOrientation-90);
                maskCell = imrotate(single(get_bait_cell_mask(this)),-this.PatternOrientation-90);
                maskPattern = imrotate(single(get_bait_pattern_mask(this)),-this.PatternOrientation-90);
                
                imgBait = imrotate(single(this.ImgBait),-this.PatternOrientation-90,'bilinear');
                
                profileBG = sum(imgBait.*maskBG)./sum(maskBG);
                profileCell = sum(imgBait.*maskCell)./sum(maskCell);
                profilePattern = sum(imgBait.*maskPattern)./sum(maskPattern);
                
                %             muZ = est_bait_inhomogeneous_illu(this);
                %             muZ = imrotate(single(muZ),-this.PatternOrientation-90,'nearest');
                %             muZ(muZ==0)=1;
                %             profilePattern = sum(imgBait./muZ.*maskPattern)./sum(maskPattern);
                
                hold(this.Bait.hProfileAx,'on')
                
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(1,1),...
                    'color',[0.5 0.5 1],'linestyle','--','linewidth',1,'Parent',this.Bait.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(1,2),...
                    'color',[0.5 0.5 1],'linewidth',2,'Parent',this.Bait.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(1,3),...
                    'color',[0.5 0.5 1],'linestyle','--','linewidth',1,'Parent',this.Bait.hProfileAx)
                plot(profileBG,'b.-','linewidth',1,'Parent',this.Bait.hProfileAx)
                
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(2,1),...
                    'color',[0.5 1 0.5],'linestyle','--','linewidth',1,'Parent',this.Bait.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(2,2),...
                    'color',[0.5 1 0.5],'linewidth',2,'Parent',this.Bait.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(2,3),...
                    'color',[0.5 1 0.5],'linestyle','--','linewidth',1,'Parent',this.Bait.hProfileAx)
                plot(profileCell,'g.-','linewidth',1,'Parent',this.Bait.hProfileAx)
                
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(3,1),...
                    'color',[1 0.5 0.5],'linestyle','--','linewidth',1,'Parent',this.Bait.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(3,2),...
                    'color',[1 0.5 0.5],'linewidth',2,'Parent',this.Bait.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Bait.Quartiles(3,3),...
                    'color',[1 0.5 0.5],'linestyle','--','linewidth',1,'Parent',this.Bait.hProfileAx)
                plot(profilePattern,'r.-','linewidth',1,'Parent',this.Bait.hProfileAx)
                
                
                %                 xLimits = [min([find(not(isnan(profileBG)),1,'first'),...
                %                     find(not(isnan(profileCell)),1,'first'),...
                %                     find(not(isnan(profilePattern)),1,'first')]),...
                %                     max([find(not(isnan(profileBG)),1,'last'),...
                %                     find(not(isnan(profileCell)),1,'last'),...
                %                     find(not(isnan(profilePattern)),1,'last')])];
                %
                %                 set(this.Bait.hProfileAx,...
                %                     'ylim',[min([min(profileBG),min(profileCell),min(profilePattern)]),...
                %                     max([max(profileBG),max(profileCell),max(profilePattern)])],...
                %                     'xlim',xLimits,...
                %                     'xtick',xLimits,...
                %                     'XTickLabel',[])
                
                set(this.Bait.hProfileAx,...
                    'XTickLabel',[])
                
                axis(this.Bait.hProfileAx,'tight')
                ylabel(this.Bait.hProfileAx,'Avg. Intensity [cnts]')
                xlabel(this.Bait.hProfileAx,'Pattern-Orthogonal Projection')
            end %if
        end %fun
        function update_bait_intensity_hist(this)
            cla(this.Bait.hHistAx)
            
            if get(this.hLiveUpdateToggle,'Value')
                
                this.Bait.objIntDist = classViolinPlot(...
                    'ModeHistogram','kde',...
                    'NumSample',2^8);
                
                %% background level
                mask = get_bait_BG_mask(this);
                data = this.ImgBait(mask);
                add_data(this.Bait.objIntDist,data,'EdgeColor','b','Name',{'BG'})
                
                %% cellular level (pot. above BG due to non-recruited bait)
                mask = get_bait_cell_mask(this);
                data = this.ImgBait(mask);
                add_data(this.Bait.objIntDist,data,'EdgeColor','g','Name',{'Cell'})
                
                %% bait level
                mask = get_bait_pattern_mask(this);
                data = this.ImgBait(mask);
                %             data = this.ImgBait(mask)./est_bait_inhomogeneous_illu(this);
                %             if not(isempty(this.Bait.Otsu)) %in case of heterogeneous recruitement
                %             [bandwidth,density,xmesh,cdf] = kde(data(this.Bait.Otsu.Group == 1),2^8);
                %             line(xmesh,density,...
                %                 'Parent',this.Bait.Intensity.hHistAx,...
                %                 'Color','k','linewidth',2)
                %             [bandwidth,density,xmesh,cdf] = kde(data(this.Bait.Otsu.Group == 2),2^8);
                %             line(xmesh,density,...
                %                 'Parent',this.Bait.Intensity.hHistAx,...
                %                 'Color','r','linewidth',2)
                %             end %if
                add_data(this.Bait.objIntDist,data,'EdgeColor','r','Name',{'Pattern'})
                
                process_all_data(this.Bait.objIntDist)
                plot_violin_patch(this.Bait.objIntDist,1,this.Bait.hHistAx)
                plot_violin_patch(this.Bait.objIntDist,2,this.Bait.hHistAx)
                plot_violin_patch(this.Bait.objIntDist,3,this.Bait.hHistAx)
                
                this.Bait.Quartiles = [...
                    [get_percentile(this.Bait.objIntDist,1,0.25),...
                    get_percentile(this.Bait.objIntDist,1,0.5),...
                    get_percentile(this.Bait.objIntDist,1,0.75)];...
                    [get_percentile(this.Bait.objIntDist,2,0.25),...
                    get_percentile(this.Bait.objIntDist,2,0.5),...
                    get_percentile(this.Bait.objIntDist,2,0.75)];...
                    [get_percentile(this.Bait.objIntDist,3,0.25),...
                    get_percentile(this.Bait.objIntDist,3,0.5),...
                    get_percentile(this.Bait.objIntDist,3,0.75)]];
                
                set(this.Bait.hHistAx,...
                    'xtick',this.Bait.objIntDist.PatchPos,...
                    'XTickLabel', [this.Bait.objIntDist.hPatch(:).Name])
                ylabel(this.Bait.hHistAx,'Intensity [cnts]')
                axis(this.Bait.hHistAx,'tight')
                
                %             line(objVio.PatchPos,...
                %                 [get_percentile(this.Bait.objIntDist,1,0.5),...
                %                 get_percentile(objVio,2,0.5),...
                %                 get_percentile(objVio,3,0.5)],...
                %                 'color',[0.5 0.5 0.5],...
                %                 'Linewidth',2,...
                %                 'Parent',this.Bait.hHistAx)
            end %if
        end %fun
        
        function est_bait_heterogeneity(this)
            if get(this.Bait.hCorrHetToggle,'Value') %apply otsu
                mask = get_DIC_pattern_mask(this);
                %                 [this.ROI.Bait.Otsu.Group,...
                %                     this.ROI.Bait.Otsu.Efficiency] = otsu(this.ImgBait(mask)./est_bait_inhomogeneous_illu(this),2);
                [this.ROI.Bait.Otsu.Group,...
                    this.ROI.Bait.Otsu.Efficiency] = otsu(this.ImgBait(mask),2);
                
                this.ROI.Bait.Otsu.Mask = mask;
                idxMask = find(mask);
                this.ROI.Bait.Otsu.Mask(idxMask(this.ROI.Bait.Otsu.Group == 1)) = 0; %remove low-intense pixels from the mask
                
                %                 diffGroup = (median(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 2)))/...
                %                 median(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 1))));
                %                 redVar = (var(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 2)))+...
                %                 var(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 1))))/...
                %                 var(this.ImgBait(idxMask));
                %
                %                 eff = diffGroup/redVar;
                
                %             eff = (mean(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 2)))-...
                %                 mean(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 1))))/...
                %                 sqrt(var(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 2)))+...
                %                 var(this.ImgBait(idxMask(this.ROI.Bait.Otsu.Group == 1)))/2);
                
                %                 set(this.Bait.hCorrHetEdit,...
                %                     'String',sprintf('Effect = %.1f',eff))
            else %assume homogeneous pattern
                this.ROI.Bait.Otsu = [];
                %                 set(this.Bait.hCorrHetEdit,...
                %                     'String',sprintf('p-Value = '))
            end %if
        end %fun
        function muZ = est_bait_inhomogeneous_illu(this)
            mask = get_bait_pattern_mask(this);
            [i,j] = find(mask);
            i = zscore(i);
            j = zscore(j);
            z = this.ImgBait(mask);
            
            f = fittype('poly22');
            [fitobject,gof] = fit([i,j],log(z),f,'robust','Bisquare');
            
            muZ = exp(feval(fitobject,[i,j]));
            %             muZ = zeros(this.ImgHeight,this.ImgWidth);
            %             muZ(mask) = exp(feval(fitobject,[i,j]));
            muZ = muZ/max(muZ(:));
        end %fun
        
        %%
        function update_prey(this)
            if not(isempty(this.ImgPrey))
                est_prey_heterogeneity(this)
                
                showMask = [get(this.Prey.hTogglePattern,'Value'),...
                    get(this.Prey.hToggleCell,'Value'),...
                    get(this.Prey.hToggleBG,'Value')];
                if any(showMask)
                    img = this.Prey.ImgNorm;
                    set(this.Prey.hImage,'Cdata',cat(3,...
                        0.7*img + 0.3*showMask(1)*get_prey_pattern_mask(this),...
                        0.8*img + 0.2*showMask(2)*get_prey_cell_mask(this),...
                        0.8*img + 0.2*showMask(3)*get_prey_BG_mask(this)))
                else
                    set(this.Prey.hImage,...
                        'Cdata',repmat(this.Prey.ImgNorm,[1 1 3]))
                end %if
                %                 axis(this.Prey.hAx,'image')
                
                update_prey_intensity_hist(this)
                update_prey_orth_profile(this)
                
                if get(this.hLiveUpdateToggle,'Value')
                    data = get(this.hResultTable,'Data');
                    numPxCell = sum(mat2vec(get_prey_cell_mask(this)));
                    numPxPattern = sum(mat2vec(get_prey_pattern_mask(this)));
                    data(3:4,:) = [...
                        [numPxCell;numPxPattern],...
                        round([[get_percentile(this.Prey.objIntDist,2,0.25),...
                        get_percentile(this.Prey.objIntDist,2,0.5),...
                        get_percentile(this.Prey.objIntDist,2,0.75)];...
                        [get_percentile(this.Prey.objIntDist,3,0.25),...
                        get_percentile(this.Prey.objIntDist,3,0.5),...
                        get_percentile(this.Prey.objIntDist,3,0.75)]]),...
                        [round(get_skewness(this.Prey.objIntDist,2)/sqrt(54/numPxCell)*100);...
                        round(get_skewness(this.Prey.objIntDist,3)/sqrt(54/numPxPattern)*100)]];
                    set(this.hResultTable,'Data',data);
                else
                    set(this.hResultTable,'Data',nan(5));
                end %if
            end %if
        end %fun
        function mask = get_prey_pattern_mask(this)
            mask = this.ROI.Pattern.Mask & not(this.ROI.Separator.Mask);
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
            
            if not(isempty(this.ROI.Cell))
                mask = mask & this.ROI.Cell.Mask;
            end %if
            
            if not(isempty(this.ROI.Prey.Otsu))
                mask = mask & this.ROI.Prey.Otsu.Mask;
            end %if
        end %fun
        function mask = get_prey_cell_mask(this)
            if isempty(this.ROI.Cell)
                mask = not(this.ROI.Pattern.Mask);
            else
                mask = this.ROI.Cell.Mask & not(this.ROI.Pattern.Mask) & not(this.ROI.Separator.Mask);
            end %if
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
        end %fun
        function mask = get_prey_BG_mask(this)
            if isempty(this.ROI.Prey.BG)
                mask = not(this.ROI.Pattern.Mask) & not(this.ROI.Separator.Mask);
            else
                mask = this.ROI.Prey.BG.Mask;
            end %if
            
            if not(isempty(this.ROI.Master))
                mask = mask & this.ROI.Master.Mask;
            end %if
            
            if not(isempty(this.ROI.Cell))
                if this.SeparatorWidth > 0
                    SE = zeros(2*this.SeparatorWidth+1);
                    SE(this.SeparatorWidth+1,:) = 1;
                    SE(:,this.SeparatorWidth+1) = 1;
                    mask = mask & not(imdilate(this.ROI.Cell.Mask,SE));
                else
                    mask = mask & not(this.ROI.Cell.Mask);
                end %if
            end %if
        end %fun
        
        function update_prey_orth_profile(this)
            cla(this.Prey.hProfileAx)
            
            if get(this.hLiveUpdateToggle,'Value')
                %             vertAlign = single(cat(3,this.MaskPattern,this.ROI.Cell.Mask,this.MaskBG,this.ImgPrey,this.ImgPrey));
                %             theta = (-this.PatternOrientation-90)/180*pi;
                %             T = [cos(theta) -sin(theta) 0; sin(theta) cos(theta) 0; 0 0 1];
                %             tform = maketform('affine', T);
                %            vertAlign = imtransform(vertAlign,tform);
                
                maskBG = imrotate(single(get_prey_BG_mask(this)),-this.PatternOrientation-90);
                maskCell = imrotate(single(get_prey_cell_mask(this)),-this.PatternOrientation-90);
                maskPattern = imrotate(single(get_prey_pattern_mask(this)),-this.PatternOrientation-90);
                imgPrey = imrotate(single(this.ImgPrey),-this.PatternOrientation-90,'bilinear');
                
                profileBG = sum(imgPrey.*maskBG)./sum(maskBG);
                profileCell = sum(imgPrey.*maskCell)./sum(maskCell);
                profilePattern = sum(imgPrey.*maskPattern)./sum(maskPattern);
                
                hold(this.Prey.hProfileAx,'on')
                
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(1,1),...
                    'color',[0.5 0.5 1],'linestyle','--','linewidth',1,'Parent',this.Prey.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(1,2),...
                    'color',[0.5 0.5 1],'linewidth',2,'Parent',this.Prey.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(1,3),...
                    'color',[0.5 0.5 1],'linestyle','--','linewidth',1,'Parent',this.Prey.hProfileAx)
                plot(profileBG,'b.-','linewidth',1,'Parent',this.Prey.hProfileAx)
                
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(2,1),...
                    'color',[0.5 1 0.5],'linestyle','--','linewidth',1,'Parent',this.Prey.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(2,2),...
                    'color',[0.5 1 0.5],'linewidth',2,'Parent',this.Prey.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(2,3),...
                    'color',[0.5 1 0.5],'linestyle','--','linewidth',1,'Parent',this.Prey.hProfileAx)
                plot(profileCell,'g.-','linewidth',1,'Parent',this.Prey.hProfileAx)
                
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(3,1),...
                    'color',[1 0.5 0.5],'linestyle','--','linewidth',1,'Parent',this.Prey.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(3,2),...
                    'color',[1 0.5 0.5],'linewidth',2,'Parent',this.Prey.hProfileAx)
                plot([1 numel(profilePattern)],[1 1]*this.Prey.Quartiles(3,3),...
                    'color',[1 0.5 0.5],'linestyle','--','linewidth',1,'Parent',this.Prey.hProfileAx)
                plot(profilePattern,'r.-','linewidth',1,'Parent',this.Prey.hProfileAx)
                
                
                %                 xLimits = [min([find(not(isnan(profileBG)),1,'first'),...
                %                     find(not(isnan(profileCell)),1,'first'),...
                %                     find(not(isnan(profilePattern)),1,'first')]),...
                %                     max([find(not(isnan(profileBG)),1,'last'),...
                %                     find(not(isnan(profileCell)),1,'last'),...
                %                     find(not(isnan(profilePattern)),1,'last')])];
                %
                %                 set(this.Prey.hProfileAx,...
                %                     'ylim',[min([min(profileBG),min(profileCell),min(profilePattern)]),...
                %                     max([max(profileBG),max(profileCell),max(profilePattern)])],...
                %                     'xlim',xLimits,...
                %                     'xtick',xLimits,...
                %                     'XTickLabel',[])
                
                set(this.Prey.hProfileAx,...
                    'XTickLabel',[])
                
                axis(this.Prey.hProfileAx,'tight')
                ylabel(this.Prey.hProfileAx,'Avg. Intensity [cnts]')
                xlabel(this.Prey.hProfileAx,'Pattern-Orthogonal Projection')
            end %if
        end %fun
        function update_prey_intensity_hist(this)
            cla(this.Prey.hHistAx)
            
            if get(this.hLiveUpdateToggle,'Value')
                this.Prey.objIntDist = classViolinPlot(...
                    'ModeHistogram','kde',...
                    'NumSample',2^8);
                
                %% background level
                mask = get_prey_BG_mask(this);
                data = this.ImgPrey(mask);
                add_data(this.Prey.objIntDist,data,'EdgeColor','b','Name',{'BG'})
                
                %% cellular level (pot. above BG due to non-recruited prey)
                mask = get_prey_cell_mask(this);
                data = this.ImgPrey(mask);
                add_data(this.Prey.objIntDist,data,'EdgeColor','g','Name',{'Cell'})
                
                %% prey level
                mask = get_prey_pattern_mask(this);
                data = this.ImgPrey(mask);
                %             data = this.ImgPrey(mask)./est_prey_inhomogeneous_illu(this);
                %             if not(isempty(this.Prey.Otsu)) %in case of heterogeneous recruitement
                %             [bandwidth,density,xmesh,cdf] = kde(data(this.Prey.Otsu.Group == 1),2^8);
                %             line(xmesh,density,...
                %                 'Parent',this.Prey.Intensity.hHistAx,...
                %                 'Color','k','linewidth',2)
                %             [bandwidth,density,xmesh,cdf] = kde(data(this.Prey.Otsu.Group == 2),2^8);
                %             line(xmesh,density,...
                %                 'Parent',this.Prey.Intensity.hHistAx,...
                %                 'Color','r','linewidth',2)
                %             end %if
                add_data(this.Prey.objIntDist,data,'EdgeColor','r','Name',{'Pattern'})
                
                process_all_data(this.Prey.objIntDist)
                plot_violin_patch(this.Prey.objIntDist,1,this.Prey.hHistAx)
                plot_violin_patch(this.Prey.objIntDist,2,this.Prey.hHistAx)
                plot_violin_patch(this.Prey.objIntDist,3,this.Prey.hHistAx)
                
                this.Prey.Quartiles = [...
                    [get_percentile(this.Prey.objIntDist,1,0.25),...
                    get_percentile(this.Prey.objIntDist,1,0.5),...
                    get_percentile(this.Prey.objIntDist,1,0.75)];...
                    [get_percentile(this.Prey.objIntDist,2,0.25),...
                    get_percentile(this.Prey.objIntDist,2,0.5),...
                    get_percentile(this.Prey.objIntDist,2,0.75)];...
                    [get_percentile(this.Prey.objIntDist,3,0.25),...
                    get_percentile(this.Prey.objIntDist,3,0.5),...
                    get_percentile(this.Prey.objIntDist,3,0.75)]];
                
                set(this.Prey.hHistAx,...
                    'xtick',this.Prey.objIntDist.PatchPos,...
                    'XTickLabel', [this.Prey.objIntDist.hPatch(:).Name])
                ylabel(this.Prey.hHistAx,'Intensity [cnts]')
                axis(this.Prey.hHistAx,'tight')
                
                %             line(objVio.PatchPos,...
                %                 [get_percentile(objVio,1,0.5),...
                %                 get_percentile(objVio,2,0.5),...
                %                 get_percentile(objVio,3,0.5)],...
                %                 'color',[0.5 0.5 0.5],...
                %                 'Linewidth',2,...
                %                 'Parent',this.Prey.hHistAx)
            end %if
        end %fun
        function est_prey_heterogeneity(this)
            if get(this.Prey.hCorrHetToggle,'Value') %apply otsu
                mask = get_DIC_pattern_mask(this);
                [this.ROI.Prey.Otsu.Group,...
                    this.ROI.Prey.Otsu.Efficiency] = otsu(this.ImgPrey(mask),2);
                %                 [this.ROI.Prey.Otsu.Group,...
                %                     this.ROI.Prey.Otsu.Efficiency] = otsu(this.ImgPrey(mask)./est_prey_inhomogeneous_illu(this),2);
                
                
                this.ROI.Prey.Otsu.Mask = mask;
                idxMask = find(mask);
                this.ROI.Prey.Otsu.Mask(idxMask(this.ROI.Prey.Otsu.Group == 1)) = 0; %remove low-intense pixels from the mask
            else %assume homogeneous pattern
                this.ROI.Prey.Otsu = [];
            end %if
        end %fun
        
        function muZ = est_prey_inhomogeneous_illu(this)
            mask = get_prey_pattern_mask(this);
            [i,j] = find(mask);
            i = zscore(i);
            j = zscore(j);
            z = this.ImgPrey(mask);
            
            f = fittype('poly22');
            [fitobject,gof] = fit([i,j],log(z),f,'robust','Bisquare');
            
            muZ = exp(feval(fitobject,[i,j]));
            %             muZ = zeros(this.ImgHeight,this.ImgWidth);
            %             muZ(mask) = exp(feval(fitobject,[i,j]));
            muZ = muZ/max(muZ(:));
        end %fun
        
        %%
        function update_contrast(this)
            if get(this.hLiveUpdateToggle,'Value')
                if not(isempty(this.ImgBait)) && not(isempty(this.ImgPrey))
                    if not(isempty(this.ROI.Cell))
                        %contrast of the bait
                        medBaitBG = get_percentile(this.Bait.objIntDist,1,0.5);
                        medBaitCell = get_percentile(this.Bait.objIntDist,2,0.5);
                        
                        %contrast of the prey
                        medPreyBG = get_percentile(this.Prey.objIntDist,1,0.5);
                        medPreyCell = get_percentile(this.Prey.objIntDist,2,0.5);
                        
                        %merge bait & prey pattern mask
                        mask = get_bait_pattern_mask(this) & get_prey_pattern_mask(this);
                        
                        switch get(this.hDropdownModel,'Value')
                            case 1
                                contrastBait = 1;
                                contrastPrey = (this.ImgPrey(mask)-medPreyBG)/(medPreyCell-medPreyBG);
                            case 2
                                contrastBait = (this.ImgBait(mask)-medBaitBG)./(medBaitCell-medBaitBG);
                                contrastPrey = (this.ImgPrey(mask)-medPreyBG)/(medPreyCell-medPreyBG);
                            case 3
                                contrastBait = (this.ImgBait(mask)-medBaitCell)./(this.ImgBait(mask)-medBaitBG);
                                contrastPrey = (this.ImgPrey(mask)-medPreyBG)/(medPreyCell-medPreyBG);                        
                        end %switch
                        relContrast = contrastPrey./contrastBait;

                        minimum=min(relContrast); maximum=max(relContrast);
                        Range=maximum-minimum;
                        MIN=minimum-Range/10; MAX=maximum+Range/10;
                        
                        %final contrast
                        obj = classViolinPlot(...
                            'ModeHistogram','kde',...
                            'NumSample',2^10,...
                            'Support',[max(0,MIN) min(100,MAX)]);
                        add_data(obj,relContrast)
                        process_all_data(obj)
                        %                 plot(obj)
                        
                        data = get(this.hResultTable,'Data');
                        N = sum(mat2vec(mask));
                        data(5,:) = [sum(mat2vec(mask)),...
                            get_percentile(obj,1,0.25),...
                            get_percentile(obj,1,0.5),...
                            get_percentile(obj,1,0.75),...
                            round(get_skewness(obj,1)/sqrt(54/N)*100)];
                        set(this.hResultTable,'Data',data);
                    end %if
                end %if
            end %if
        end %fun
        
        %%
        function export_results(this)
            pathExport = uigetdir(this.WorkPath);
            mkdir(pathExport,'Analysis')
            pathExport = fullfile(pathExport,'Analysis');
            
            %% export masks
            ROI = this.ROI;
            save(fullfile(pathExport,sprintf('Results.mat')),'ROI')
            
            %% figure
            if not(isempty(this.ImgDIC))
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.hAxDIC,hFig);
                print(hFig,'-dpng','-r300',fullfile(pathExport,'DIC_Channel.png'))
                close(hFig)
                
                mask = get_DIC_cell_mask(this);
                imwrite(mask,fullfile(pathExport,sprintf('Cell_Mask.tif')),...
                    'compression','none')
            end %if
            
            if not(isempty(this.ImgBait))
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.Bait.hAx,hFig);
                print(hFig,'-dpng','-r300',fullfile(pathExport,'Bait_Channel.png'))
                close(hFig)
                
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.Bait.hProfileAx,hFig);
                set(hAx,'Units','normalized','outerposition',[0 0 1 1])
                print(hFig,'-dpng','-r300',fullfile(pathExport,'Bait_Intensity_Profile.png'))
                close(hFig)
                
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.Bait.hHistAx,hFig);
                set(hAx,'Units','normalized','outerposition',[0 0 1 1])
                print(hFig,'-dpng','-r300',fullfile(pathExport,'Bait_Intensity_Distribution.png'))
                close(hFig)
                
                mask = get_bait_pattern_mask(this);
                imwrite(mask,fullfile(pathExport,sprintf('Bait_Pattern_Mask.tif')),...
                    'compression','none')
                
                mask = get_bait_BG_mask(this);
                imwrite(mask,fullfile(pathExport,sprintf('BG_Mask.tif')),...
                    'compression','none')
            end %if
            
            if not(isempty(this.ImgPrey))
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.Prey.hAx,hFig);
                print(hFig,'-dpng','-r300',fullfile(pathExport,'Prey_Channel.png'))
                close(hFig)
                
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.Prey.hProfileAx,hFig);
                set(hAx,'Units','normalized','outerposition',[0 0 1 1])
                print(hFig,'-dpng','-r300',fullfile(pathExport,'Prey_Intensity_Profile.png'))
                close(hFig)
                
                hFig = figure('Visible','off','PaperPositionMode','auto');
                hAx = copyobj(this.Prey.hHistAx,hFig);
                set(hAx,'Units','normalized','outerposition',[0 0 1 1])
                print(hFig,'-dpng','-r300',fullfile(pathExport,'Prey_Intensity_Distribution.png'))
                close(hFig)
                
                mask = get_prey_pattern_mask(this);
                imwrite(mask,fullfile(pathExport,sprintf('Prey_Pattern_Mask.tif')),...
                    'compression','none')
            end %if
            
            %% export xls
            xlswrite(fullfile(pathExport,'Intensities.xlsx'),...
                [['/' rowvec(get(this.hResultTable,'ColumnName'))];...
                [get(this.hResultTable,'RowName'),num2cell(get(this.hResultTable,'Data'))]])
            
        end %fun
    end %methods
    
    methods(Static)
        function [maskPattern,maskSep] = gen_mask_pattern(...
                imgHeight,imgWidth,width,spacing,orientation,offset,separation)
            %% generate binary pattern mask
            if orientation == 90
                projStripWidth = width;
                projStripPause = spacing;
                projSeparation = separation;
                
                m = 0;
                i = (1:imgWidth)-offset; %centered at centroid of the dominant stripe
                r = i(:)*ones(1,imgHeight); %expand to array
                r = bsxfun(@plus,r,m*((1:imgHeight)-offset)); %shift columns according to the estimated linear function
                
                maskPattern = [ones(floor((projStripWidth-projSeparation)/2),1); ...
                    -1*ones(projSeparation,1); ...
                    zeros(floor(projStripPause-projSeparation),1); ...
                    -1*ones(projSeparation,1); ...
                    ones(ceil((projStripWidth-projSeparation)/2),1)];
                iPattern = floor(mod(r,numel(maskPattern))+1);
                maskPattern = rot90(maskPattern(iPattern));
            elseif orientation == 0
                projStripWidth = width;
                projStripPause = spacing;
                projSeparation = separation;
                
                m = 0;
                i = (1:imgHeight)-offset; %centered at centroid of the dominant stripe
                r = i(:)*ones(1,imgWidth); %expand to array
                r = bsxfun(@plus,r,m*((1:imgWidth)-offset)); %shift columns according to the estimated linear function
                
                maskPattern = [ones(floor((projStripWidth-projSeparation)/2),1); ...
                    -1*ones(projSeparation,1); ...
                    zeros(floor(projStripPause-projSeparation),1); ...
                    -1*ones(projSeparation,1); ...
                    ones(ceil((projStripWidth-projSeparation)/2),1)];
                iPattern = floor(mod(r,numel(maskPattern))+1);
                maskPattern = maskPattern(iPattern);
            else
                projStripWidth = width/cosd(orientation);
                projStripPause = spacing/cosd(orientation);
                projSeparation = round(separation/cosd(orientation));
                
                m = sind(orientation)/cosd(orientation);
                i = (1:imgHeight)-offset; %centered at centroid of the dominant stripe
                r = i(:)*ones(1,imgWidth); %expand to array
                r = bsxfun(@plus,r,m*((1:imgWidth)-offset)); %shift columns according to the estimated linear function
                
                maskPattern = [ones(floor((projStripWidth-projSeparation)/2),1); ...
                    -1*ones(projSeparation,1); ...
                    zeros(floor(projStripPause-projSeparation),1); ...
                    -1*ones(projSeparation,1); ...
                    ones(ceil((projStripWidth-projSeparation)/2),1)];
                iPattern = floor(mod(r,numel(maskPattern))+1);
                maskPattern = maskPattern(iPattern);
            end %if
            
            maskSep = logical(maskPattern == -1);
            maskPattern = logical(maskPattern == 1);
        end %fun
        function ROI = set_roi(hAx)
            repeat = true;
            while repeat
                hRoi = imfreehand(hAx);
                fcn = makeConstrainToRectFcn('imfreehand',get(hAx,'Xlim'),get(hAx,'Ylim'));
                setPositionConstraintFcn(hRoi,fcn);
                
                if generate_binary_decision_dialog('',{'Accept defined ROI?'});
                    repeat = false;
                    
                    ROI.Vert = getPosition(hRoi); %[j i]
                    ROI.Mask = createMask(hRoi);
                    ROI.BoundaryMask = bwperim(ROI.Mask);
                    ROI.Area = bwarea(ROI.Mask);
                    ROI.RectHull = [round(min(ROI.Vert(:,1))),round(max(ROI.Vert(:,1))),...
                        round(min(ROI.Vert(:,2))),round(max(ROI.Vert(:,2)))]; %[jmin jmax imin imax]
                    
                    delete(hRoi)
                else
                    if generate_binary_decision_dialog('',{'Repeat ROI definition?'});
                        delete(hRoi)
                    else
                        ROI = [];
                        delete(hRoi)
                        return
                    end %if
                end %if
            end %while
        end %fun
    end %methods
end %class