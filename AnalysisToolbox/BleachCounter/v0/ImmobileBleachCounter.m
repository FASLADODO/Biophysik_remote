classdef ImmobileBleachCounter < handle
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties(Transient)
        WorkPath
        
        hFig
        
        hTrajSelectPopup
        
        hTrajAx
        hRawTraj
        hEstTraj
        
        hTrajChangeAx
        hRawTrajChange
        hEstTrajChange
        hLvl
        hNoiseLB
        hNoiseUB
        
        hTrajResAx
        hRawTrajRes
        
        hTrajChangeHistAx
        hIlluMap
        
        hStepChangeHistAx
        hStepHist
        hStepHistBwSlider
        hStepHistBwEdit
        StepHistMin = 0
        StepHistMax
        StepHistBw
        
        hStepChangeMapAx
        hClusterPnt
        hCurrentClusterPnt
        
        hImmCountHistAx
        hFiducialPnt
        
        hMinCountChangeSlider
        hMinCountChangeEdit
        CountChangeMin = 0
        CountChangeMax
        
        hMinPeakLengthSlider
        hMinPeakLengthEdit
        PeakLengthMin = 0
        PeakLengthMax
        
        hMinTransitLengthSlider
        hMinTransitLengthEdit
        TransitLengthMin = 0
        TransitLengthMax
        
        hLockButton
        
        Cluster
        ClusterID %the unique ID's
        NumCluster
        
        FOV %[xmin xmax ymin ymax]
        
        p
    end %properties
    
    methods
        %constructor
        function this = ImmobileBleachCounter
            this.WorkPath = pwd;
            addpath(genpath(this.WorkPath))
            
            figPos = set_figure_position(1,0.85,'center');
            this.hFig = figure('Units','pixels',...
                'Name','BLEACH COUNTER v1.0',...
                'NumberTitle', 'off',...
                'DockControls', 'off',...
                'MenuBar','none',...
                'Toolbar','figure',...
                'Position',figPos);
            
            %%
            hPanelNavi = uipanel(...
                'Parent',this.hFig,...
                'Units','normalized',...
                'FontUnits','normalized',...
                'FontSize',0.1,...
                'backgroundcolor','w',...
                'Position',[0 9/10 2/3 1/10]);
            
            uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 2/5 1/4 3/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Load Data',...
                'Callback', @(src,evnt)load_data(this));
            
            uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [1/4 2/5 1/4 3/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Accept All',...
                'Callback', @(src,evnt)accept_all_steps(this));
            
            uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [2/4 2/5 1/4 3/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Discard All',...
                'Callback', @(src,evnt)discard_all_steps(this));
            
            uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [3/4 2/5 1/4 3/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Export Results',...
                'Callback', @(src,evnt)save_results(this));
            
            uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 0 1/8 2/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Previous',...
                'Callback', @(src,evnt)previous_traj_ID(this));
            
            uicontrol(...
                'Parent', hPanelNavi,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [1/8 0 2/8 2/5],...
                'String', sprintf('Trajectory ID:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            
            this.hTrajSelectPopup = uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'popupmenu',...
                'Units','normalized',...
                'Position', [3/8 -0.02 4/8 2/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String','Empty',...
                'Callback', @(src,evnt)update_step_detection(this));
            
            uicontrol(...
                'Parent',hPanelNavi,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [7/8 0 1/8 2/5],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Next',...
                'Callback', @(src,evnt)next_traj_ID(this));
            
            %%
            hPanelTraj = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[0 7/10 2/3 2/10]);
            
            this.hTrajAx = axes(...
                'Parent',hPanelTraj,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            xlabel(this.hTrajAx,'Time [frame]')
            ylabel(this.hTrajAx,'Signal')
            
            this.hRawTraj = line(...
                'Parent',this.hTrajAx,...
                'xdata',0,...
                'ydata',0,...
                'Color','k',...
                'Marker','.',...
                'Linewidth',1);
            
            this.hEstTraj = line(...
                'Parent',this.hTrajAx,...
                'xdata',0,...
                'ydata',0,...
                'Color','r',...
                'Linewidth',2);
            
            %%
            hPanelTrajChange = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[0 5/10 2/3 2/10]);
            
            this.hTrajChangeAx = axes(...
                'Parent',hPanelTrajChange,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on',...
                'NextPlot','add');
            
            this.hNoiseLB = line(...
                'Parent',this.hTrajChangeAx,...
                'xdata',0,...
                'ydata',0,...
                'Color','c',...
                'Linewidth',1);
            this.hNoiseUB = line(...
                'Parent',this.hTrajChangeAx,...
                'xdata',0,...
                'ydata',0,...
                'Color','c',...
                'Linewidth',1);
            
            this.hEstTrajChange = stem(0,0,...
                'Parent',this.hTrajChangeAx,...
                'Color','r',...
                'Marker','none',...
                'Linewidth',3);
            
            this.hRawTrajChange = stem(0,0,...
                'Parent',this.hTrajChangeAx,...
                'Color','k',...
                'Marker','none');
            xlabel(this.hTrajChangeAx,'Time [frame]')
            ylabel(this.hTrajChangeAx,'Signal Difference')
            
            %%
            hPanelTrajRes = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[0 3/10 2/3 2/10]);
            
            this.hTrajResAx = axes(...
                'Parent',hPanelTrajRes,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.hRawTrajRes = stem(0,0,...
                'Parent',this.hTrajResAx,...
                'Color','k',...
                'Marker','none');
            xlabel(this.hTrajResAx,'Time [frame]')
            ylabel(this.hTrajResAx,'Residual')
            
            %%
            hPanelTrajChangeHist = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[1/3 0 1/3 3/10]);
            
            this.hTrajChangeHistAx = axes(...
                'Parent',hPanelTrajChangeHist,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.hIlluMap = imagesc(0,0,0,...
                'Parent',this.hTrajChangeHistAx);
            
            xlabel(this.hTrajChangeHistAx,'x-position')
            ylabel(this.hTrajChangeHistAx,'y-position')
            
            %%
            hPanelStepChangeHist = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[0 0 1/3 3/10]);
            
            this.hStepChangeHistAx = axes(...
                'Parent',hPanelStepChangeHist,...
                'Units','normalized',...
                'OuterPosition', [0 0.1 1 0.9],...
                'Box','on');
            
            this.hStepHist = line(...
                'Parent',this.hStepChangeHistAx,...
                'xdata',0,...
                'ydata',0,...
                'Color','r',...
                'Linewidth',2);
            
            xlabel(this.hStepChangeHistAx,'Stepsize')
            ylabel(this.hStepChangeHistAx,'PDF')
            
            uicontrol(...
                'Parent', hPanelStepChangeHist,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 0 1/4 0.1],...
                'String', sprintf('Bandwidth:'),...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.hStepHistBwSlider = uicontrol(...
                'Parent', hPanelStepChangeHist,...
                'Style', 'slider',...
                'Min',0,...
                'Max',1,...
                'Value', 0,...
                'Units', 'normalized',...
                'Position', [1/4 0 2/4 0.1]);
            addlistener(this.hStepHistBwSlider,'ContinuousValueChange',...
                @(src,event)set_step_hist_bw(this,src));
            this.hStepHistBwEdit = uicontrol(...
                'Parent', hPanelStepChangeHist,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [3/4 0 1/4 0.1],...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'String', 0,...
                'Callback', @(src,evnt)set_step_hist_bw(this,src));
            
            %%
            hPanelStepChangeMap = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[2/3 3/10 1/3 3/10]);
            
            this.hStepChangeMapAx = axes(...
                'Parent',hPanelStepChangeMap,...
                'Units','normalized',...
                'OuterPosition', [0 0.1 1 0.9],...
                'DataAspectRatio',[1 1 1],...
                'Box','on');
            xlabel(this.hStepChangeMapAx,'x-position')
            ylabel(this.hStepChangeMapAx,'y-position')
            title(this.hStepChangeMapAx,'Selected:')
            
            this.hClusterPnt = line(...
                'xdata',0,'ydata',0,...
                'linestyle','none',...
                'color','k',...
                'marker','.',...
                'markersize',10);
            
            this.hCurrentClusterPnt = line(...
                'xdata',0,'ydata',0,...
                'color','r',...
                'marker','.',...
                'markersize',15);
            
            uicontrol(...
                'Parent',hPanelStepChangeMap,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 0 1 0.1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Select Trajectory',...
                'Callback', @(src,evnt)select_traj(this));
            
            %%
            hPanelImmCountHist = uipanel(...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[2/3 0 1/3 3/10]);
            
            this.hImmCountHistAx = axes(...
                'Parent',hPanelImmCountHist,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            xlabel(this.hImmCountHistAx,'x-position')
            ylabel(this.hImmCountHistAx,'y-position')
            title(this.hImmCountHistAx,'Fiducial:')
            
            this.hFiducialPnt = line(...
                'xdata',0,'ydata',0,...
                'linestyle','none',...
                'color','k',...
                'marker','.',...
                'markersize',10);
            
            %%
            hPanelStasiSetting = uipanel(...
                'Parent',this.hFig,...
                'Title','STASI:',...
                'TitlePosition','centertop',...
                'Units','normalized',...
                'FontUnits','normalized',...
                'FontSize',0.075,...
                'backgroundcolor','w',...
                'Position',[2/3 6/10 1/3 4/10]);
            
            uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 12/14 1 2/14],...
                'String', sprintf('Min. Count Change [ADU]:'),...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.hMinCountChangeSlider = uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'slider',...
                'Min',0,...
                'Max',1,...
                'Value', 0,...
                'Units', 'normalized',...
                'Position', [0 10/14 3/4 2/14]);
            addlistener(this.hMinCountChangeSlider,'ContinuousValueChange',...
                @(src,event)set_min_count_change(this,src));
            this.hMinCountChangeEdit = uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [3/4 10/14 1/4 2/14],...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'String', 0,...
                'Callback', @(src,evnt)set_min_count_change(this,src));
            
            
            uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 8/14 1 2/14],...
                'String', sprintf('Min. Peak Length [frames]:'),...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.hMinPeakLengthSlider = uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'slider',...
                'Min',0,...
                'Value', 0,...
                'Units', 'normalized',...
                'Position', [0 6/14 3/4 2/14]);
            addlistener(this.hMinPeakLengthSlider,'ContinuousValueChange',...
                @(src,event)set_min_peak_length(this,src));
            this.hMinPeakLengthEdit = uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [3/4 6/14 1/4 2/14],...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'String', 0,...
                'Callback', @(src,evnt)set_min_peak_length(this,src));
            
            
            uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0 4/14 1 2/14],...
                'String', sprintf('Min. Transit Length [frames]:'),...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            this.hMinTransitLengthSlider = uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'slider',...
                'Min',0,...
                'Value', 0,...
                'Units', 'normalized',...
                'Position', [0 2/14 3/4 2/14]);
            addlistener(this.hMinTransitLengthSlider,'ContinuousValueChange',...
                @(src,event)set_min_transit_length(this,src));
            this.hMinTransitLengthEdit = uicontrol(...
                'Parent', hPanelStasiSetting,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [3/4 2/14 1/4 2/14],...
                'FontUnits','normalized',...
                'FontSize',0.4,...
                'String', 0,...
                'Callback', @(src,evnt)set_min_transit_length(this,src));
            
            this.hLockButton = uicontrol(...
                'Parent',hPanelStasiSetting,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0 0 1 2/14],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Lock Settings',...
                'Callback', @(src,evnt)lock_and_analyse_all(this));
            
            %%
            axis([this.hStepChangeMapAx this.hImmCountHistAx this.hTrajChangeHistAx],'image','xy')
            linkaxes([this.hStepChangeMapAx this.hImmCountHistAx this.hTrajChangeHistAx],'xy')
            
            linkaxes([this.hTrajAx this.hTrajChangeAx this.hTrajResAx],'x')
            
            colormap('hot')
        end %fun
        function load_data(this)
            [fileName,filePath] = uigetfile('*.txt');
            
            listLoad = {...
                'Position_X',...
                'Position_Y',...
                'Time',...
                'Photons',...
                'Cluster_ID'};
            
            isMatch = cellfun(@(x)strfind(fileName,x),listLoad,'un',0);
            fileName = fileName(1:isMatch{not(cellfun('isempty',isMatch))}-1);
            
            try
                x = dlmread(fullfile(filePath,[fileName,listLoad{1},'.txt']),'\t',1,0);
                y = dlmread(fullfile(filePath,[fileName,listLoad{2},'.txt']),'\t',1,0);
                t = dlmread(fullfile(filePath,[fileName,listLoad{3},'.txt']),'\t',1,0);
                A = dlmread(fullfile(filePath,[fileName,listLoad{4},'.txt']),'\t',1,0);
                ID = dlmread(fullfile(filePath,[fileName,listLoad{5},'.txt']),'\t',1,0);
                
                this.ClusterID = unique(ID);
                this.NumCluster = numel(this.ClusterID);
                for idxCluster = 1:this.NumCluster
                    take = find(ID == this.ClusterID(idxCluster));
                    
                    %sort to ascend in time
                    [this.Cluster(idxCluster).t,idxSort] = sort(t(take));
                    this.Cluster(idxCluster).x = x(take(idxSort));
                    this.Cluster(idxCluster).y = y(take(idxSort));
                    this.Cluster(idxCluster).A = A(take(idxSort));
                    
                    %check there are no duplicates -> for the moment average in case (fix later)
                    if numel(unique(t(take))) < numel(t(take))
                        this.Cluster(idxCluster).x = ...
                            nonzeros(accumarray(this.Cluster(idxCluster).t,...
                            this.Cluster(idxCluster).x,[],@(x)mean(x)));
                        this.Cluster(idxCluster).y = ...
                            nonzeros(accumarray(this.Cluster(idxCluster).t,...
                            this.Cluster(idxCluster).y,[],@(x)mean(x)));
                        this.Cluster(idxCluster).A = ...
                            nonzeros(accumarray(this.Cluster(idxCluster).t,...
                            this.Cluster(idxCluster).A,[],@(x)mean(x)));
                    end %if
                    this.Cluster(idxCluster).xCtr = mean(this.Cluster(idxCluster).x);
                    this.Cluster(idxCluster).yCtr = mean(this.Cluster(idxCluster).y);
                    this.Cluster(idxCluster).T = range(this.Cluster(idxCluster).t)+1;
                end %for
                this.FOV = [min(vertcat(this.Cluster.x)),...
                    max(vertcat(this.Cluster.x)),...
                    min(vertcat(this.Cluster.y)),...
                    max(vertcat(this.Cluster.y))];
                
                %set up GUI
                set(this.hTrajSelectPopup,'String',num2cell(1:this.NumCluster))
                
                maxPotCountChange = ceil(log10(max(vertcat(this.Cluster.A)) - ...
                    min(vertcat(this.Cluster.A))));
                set(this.hMinCountChangeSlider,...
                    'Max', maxPotCountChange,...
                    'SliderStep', [0.1 1]./maxPotCountChange)
                set(this.hStepHistBwSlider,...
                    'Max', maxPotCountChange,...
                    'SliderStep', [0.1 1]./maxPotCountChange)
                
                maxPotLength = ceil(max(vertcat(this.Cluster.t))/10);
                set(this.hMinPeakLengthSlider,...
                    'Max', maxPotLength,...
                    'SliderStep', [1 10]./maxPotLength)
                set(this.hMinTransitLengthSlider,...
                    'Max', maxPotLength,...
                    'SliderStep', [1 10]./maxPotLength)
                
                set(this.hClusterPnt,...
                    'xdata',vertcat(this.Cluster.x),...
                    'ydata',vertcat(this.Cluster.y))
                axis(this.hStepChangeMapAx,this.FOV)
                
                update_step_detection(this)
            catch
                generate_error_dialog('Load Error',{'Missing File(s)'})
            end %try
        end %fun
        function save_results(this)
            [fileName,filePath] = uigetfile('*.txt','MultiSelect','on');
            
            listLoad = {...
                'Position_X',...
                'Position_Y',...
                'Time',...
                'Photons'};
            
            isMatch = cellfun(@(x)strfind(fileName,x),listLoad,'un',0);
            fileName = fileName(1:isMatch{not(cellfun('isempty',isMatch))}-1);
            
            x = dlmread(fullfile(filePath,[fileName,listLoad{1},'.txt']),'\t',1,0);
            y = dlmread(fullfile(filePath,[fileName,listLoad{2},'.txt']),'\t',1,0);
            t = dlmread(fullfile(filePath,[fileName,listLoad{3},'.txt']),'\t',1,0);
            take = (t == 1);
            A = dlmread(fullfile(filePath,[fileName,listLoad{4},'.txt']),'\t',1,0);
            
            N = A(take)./10.^feval(this.p,x(take),y(take));
            %             N = A(take)./10.^polyVal2D(this.p,x(take),y(take),2,2);
            
            [fileName,filePath] = uiputfile('*.txt','Save to',filePath);
            dlmwrite(fullfile(filePath,fileName),N,'\t')
        end %fun
        
        %% setter
        function previous_traj_ID(this)
            ID = get(this.hTrajSelectPopup,'Value');
            ID = ID - 1;
            if ID > 0
                set(this.hTrajSelectPopup,'Value',ID);
                update_step_detection(this)
            end %if
        end %fun
        function next_traj_ID(this)
            ID = get(this.hTrajSelectPopup,'Value');
            ID = ID + 1;
            if ID <= this.NumCluster
                set(this.hTrajSelectPopup,'Value',ID);
                update_step_detection(this)
            end %if
        end %fun
        function select_traj(this)
            ID = get(this.hTrajSelectPopup,'String');
            
            selection = impoint(this.hStepChangeMapAx);
            pos = getPosition(selection);
            delete(selection)
            
            d = sqrt((vertcat(this.Cluster.xCtr)-pos(1)).^2 + ...
                (vertcat(this.Cluster.yCtr)-pos(2)).^2);
            ID = str2double(cell2mat(ID(d == min(d))));
            
            set(this.hTrajSelectPopup,'Value',ID);
            update_step_detection(this)
        end %fun
        
        function set_min_count_change(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = get(src,'Value');
                case 'edit'
                    value = log10(str2double(get(src,'String')));
            end %switch
            value = max(value,0);
            
            this.CountChangeMin = value;
            set(this.hMinCountChangeEdit,'String',10^value)
            set(this.hMinCountChangeSlider,'Value',value)
            
            update_step_detection(this)
        end %fun
        function set_min_peak_length(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = round(get(src,'Value'));
                case 'edit'
                    value = round(str2double(get(src,'String')));
            end %switch
            value = max(value,0);
            
            this.PeakLengthMin = value;
            set(this.hMinPeakLengthEdit,'String',value)
            set(this.hMinPeakLengthSlider,'Value',value)
            
            update_step_detection(this)
        end %fun
        function set_min_transit_length(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = round(get(src,'Value'));
                case 'edit'
                    value = round(str2double(get(src,'String')));
            end %switch
            value = max(value,0);
            
            this.TransitLengthMin = value;
            set(this.hMinTransitLengthEdit,'String',value)
            set(this.hMinTransitLengthSlider,'Value',value)
            
            update_step_detection(this)
        end %fun
        
        function set_step_hist_bw(this,src)
            switch get(src,'Style')
                case 'slider'
                    value = get(src,'Value');
                case 'edit'
                    value = log10(str2double(get(src,'String')));
            end %switch
            value = max(value,0);
            
            this.StepHistBw = value;
            set(this.hStepHistBwEdit,'String',10^value)
            set(this.hStepHistBwSlider,'Value',value)
            
            update_step_hist(this)
        end %fun
        
        %% getter
        function ID = get_traj_ID(this)
            ID = get(this.hTrajSelectPopup,'Value');
        end %fun
        
        %%
        function update_step_detection(this)
            idxCluster = get_traj_ID(this);
            
            set(this.hCurrentClusterPnt,...
                'xdata',this.Cluster(idxCluster).x,...
                'ydata',this.Cluster(idxCluster).y)
            
            if get(this.hLockButton,'Value') == 0
                analyse_traj(this,idxCluster)
            end %if
            
            %% signal
            t = colvec(min(this.Cluster(idxCluster).t):max(this.Cluster(idxCluster).t));
            A = accumarray(this.Cluster(idxCluster).t,this.Cluster(idxCluster).A,...
                [max(this.Cluster(idxCluster).t), 1],[],nan);
            A = A(min(this.Cluster(idxCluster).t):end);
            
            set(this.hRawTraj,...
                'xdata',t,...
                'ydata',A)
            
            set(this.hEstTraj,...
                'xdata',this.Cluster(idxCluster).t,...
                'ydata',this.Cluster(idxCluster).Ahat)
            axis(this.hTrajAx,'tight')
            
            %% signal difference
            set(this.hEstTrajChange,...
                'xdata',this.Cluster(idxCluster).tLvl,...
                'ydata',this.Cluster(idxCluster).dLvl)
            
            dA = diff(A);
            noise = 1.4826*mad(dA,1);
            
            set(this.hNoiseLB,...
                'xdata',[t(2) t(end)]-0.5,...
                'ydata',-[1 1]*2.575829*noise)
            
            set(this.hNoiseUB,...
                'xdata',[t(2) t(end)]-0.5,...
                'ydata',[1 1]*2.575829*noise)
            
            set(this.hRawTrajChange,...
                'xdata',t(2:end)-0.5,...
                'ydata',dA)
            
            if not(isempty(this.hLvl))
                delete(this.hLvl); this.hLvl = [];
            end %if
            
            for idxStep = 1:numel(this.Cluster(idxCluster).Lvl)
                this.hLvl(idxStep) = line('parent',this.hRawTrajChange,...
                    'xdata',this.Cluster(idxCluster).iLvl(idxStep),...
                    'ydata',this.Cluster(idxCluster).Lvl(idxStep),...
                    'Linestyle','none',...
                    'marker','.','markersize',25,...
                    'ButtonDownFcn',@(src,evnt)switch_step_state(this,idxCluster,idxStep));
                if this.Cluster(idxCluster).useLvl(idxStep)
                    set(this.hLvl(idxStep),'color','g')
                else
                    set(this.hLvl(idxStep),'color','r')
                end %if
            end
            
            ylim(this.hTrajChangeAx,...
                [min(vertcat(dA(:),this.Cluster(idxCluster).Lvl(:))),...
                max(vertcat(dA(:),this.Cluster(idxCluster).Lvl(:)))])
            
            %% residual
            resA = accumarray(this.Cluster(idxCluster).t,...
                this.Cluster(idxCluster).A-this.Cluster(idxCluster).Ahat,...
                [max(this.Cluster(idxCluster).t), 1],[],nan);
            resA = resA(min(this.Cluster(idxCluster).t):end);
            
            set(this.hRawTrajRes,...
                'xdata',t,...
                'ydata', resA)
            ylim(this.hTrajResAx,[min(resA) max(resA)])
        end %fun
        
        function switch_step_state(this,idxCluster,idxStep)
            if this.Cluster(idxCluster).useLvl(idxStep)
                this.Cluster(idxCluster).useLvl(idxStep) = false;
                set(this.hLvl(idxStep),'color','r')
            else
                this.Cluster(idxCluster).useLvl(idxStep) = true;
                set(this.hLvl(idxStep),'color','g')
            end %if
            
            update_fiducial_map(this)
            update_step_hist(this)
        end %fun
        
        function accept_all_steps(this)
            for idxCluster = 1:this.NumCluster
                accept_traj_steps(this,idxCluster)
            end %for
        end %fun
        function discard_all_steps(this)
            for idxCluster = 1:this.NumCluster
                discard_traj_steps(this,idxCluster)
            end %for
        end %fun
        function accept_traj_steps(this,idxCluster)
            for idxStep = 1:this.Cluster(idxCluster).NumLvl
                this.Cluster(idxCluster).useLvl(idxStep) = true;
            end %for
            if idxCluster == get_traj_ID(this)
                set(this.hLvl,'color','g')
            end %if
        end %fun
        function discard_traj_steps(this,idxCluster)
            for idxStep = 1:this.Cluster(idxCluster).NumLvl
                this.Cluster(idxCluster).useLvl(idxStep) = false;
            end %for
            if idxCluster == get_traj_ID(this)
                set(this.hLvl,'color','r')
            end %if
        end %fun
        
        function update_fiducial_map(this)
            take = logical(vertcat(this.Cluster.useLvl));
            xLvl = vertcat(this.Cluster.xLvl);
            yLvl = vertcat(this.Cluster.yLvl);
            
            set(this.hFiducialPnt,...
                'xdata', xLvl(take),...
                'ydata', yLvl(take))
            
            lvl = vertcat(this.Cluster.Lvl);
            approx_illu(this,xLvl(take),yLvl(take),abs(lvl(take)))
        end %fun
        function update_step_hist(this)
            take = logical(vertcat(this.Cluster.useLvl));
            lvl = vertcat(this.Cluster.Lvl);
            
            if isempty(this.StepHistBw)
                [density,xmesh,bw] = ksdensity(lvl(take));
                this.StepHistBw = log10(bw);
                set(this.hStepHistBwEdit,'String',10^this.StepHistBw)
                set(this.hStepHistBwSlider,'Value',this.StepHistBw)
            else
                [density,xmesh] = ksdensity(lvl(take),'bandwidth',10^this.StepHistBw);
            end %if
            
            set(this.hStepHist,...
                'xdata', xmesh,...
                'ydata', density./max(density))
            axis(this.hStepChangeHistAx,'tight')
        end %fun
        
        %%
        function analyse_traj(this,idxCluster)
            [~,~,~,this.Cluster(idxCluster).Ahat] = ...
                STASI_analysis(this.Cluster(idxCluster).A,...
                10^this.CountChangeMin,0,this.PeakLengthMin,this.TransitLengthMin);
            this.Cluster(idxCluster).Ahat = colvec(this.Cluster(idxCluster).Ahat);
            this.Cluster(idxCluster).dLvl = diff(this.Cluster(idxCluster).Ahat);
            this.Cluster(idxCluster).tLvl = this.Cluster(idxCluster).t(1:end-1)+(this.Cluster(idxCluster).t(2:end)-this.Cluster(idxCluster).t(1:end-1))/2;
            take = (this.Cluster(idxCluster).dLvl ~= 0);
            this.Cluster(idxCluster).Lvl = this.Cluster(idxCluster).dLvl(take);
            this.Cluster(idxCluster).iLvl = this.Cluster(idxCluster).tLvl(take);
            this.Cluster(idxCluster).NumLvl = size(this.Cluster(idxCluster).Lvl,1);
            this.Cluster(idxCluster).useLvl = true(this.Cluster(idxCluster).NumLvl,1);
            
            this.Cluster(idxCluster).xLvl = this.Cluster(idxCluster).x(1:end-1)+(this.Cluster(idxCluster).x(2:end)-this.Cluster(idxCluster).x(1:end-1))/2;
            this.Cluster(idxCluster).xLvl = this.Cluster(idxCluster).xLvl(take);
            this.Cluster(idxCluster).yLvl = this.Cluster(idxCluster).y(1:end-1)+(this.Cluster(idxCluster).y(2:end)-this.Cluster(idxCluster).y(1:end-1))/2;
            this.Cluster(idxCluster).yLvl = this.Cluster(idxCluster).yLvl(take);
        end %fun
        function lock_and_analyse_all(this)
            if get(this.hLockButton,'Value')
                %deactivate slider etc.
                set([...
                    this.hMinCountChangeSlider, this.hMinCountChangeEdit,...
                    this.hMinPeakLengthSlider, this.hMinPeakLengthEdit,...
                    this.hMinTransitLengthSlider, this.hMinTransitLengthEdit,...
                    ],'Enable','off')
                
                set([...
                    this.hStepHistBwSlider, this.hStepHistBwEdit,...
                    ],'Enable','on')
                
                hBar = ProgressBar({0});
                for idxCluster = 1:this.NumCluster
                    analyse_traj(this,idxCluster)
                    update_progressbar(hBar,{idxCluster/this.NumCluster})
                end %for
                close_progressbar(hBar)
                
                update_step_detection(this)
                update_fiducial_map(this)
                update_step_hist(this)
            else
                set([...
                    this.hMinCountChangeSlider, this.hMinCountChangeEdit,...
                    this.hMinPeakLengthSlider, this.hMinPeakLengthEdit,...
                    this.hMinTransitLengthSlider, this.hMinTransitLengthEdit,...
                    ],'Enable','on')
                
                set(this.hFiducialPnt,...
                    'xdata',[],...
                    'ydata',[])
                
                set(this.hStepHist,...
                    'xdata',[],...
                    'ydata',[])
                
                set(this.hIlluMap,...
                    'xdata',[],...
                    'ydata',[],...
                    'cdata',[])
                
                set([...
                    this.hStepHistBwSlider, this.hStepHistBwEdit,...
                    ],'Enable','off')
            end %switch
        end %fun
        
        function approx_illu(this,x,y,A)
            try
                fitOptions = fitoptions('poly22');
                fitOptions.Robust = 'on';
                fitOptions.Lower = [-eps -inf -inf -inf -inf -inf];
                fitOptions.Upper = [eps inf inf 0 inf 0];
                [this.p,gof] = fit([x,y],log10(A),fittype('poly22'),fitOptions);
                
                %             this.p = polyFit2D(log10(A),x,y,2,2);
                
                [X,Y] = meshgrid(...
                    linspace(this.FOV(1),this.FOV(2),100),...
                    linspace(this.FOV(3),this.FOV(4),100));
                %             f = reshape(polyVal2D(this.p,X(:),Y(:),2,2),100,100);
                f = reshape(feval(this.p,[X(:),Y(:)]),100,100);
                
                set(this.hIlluMap,...
                    'xdata',X(1,:),...
                    'ydata',Y(:,1),...
                    'cdata',f)
                caxis(this.hTrajChangeHistAx,[min(f(:)) max(f(:))])
            end
        end %fun
    end %methods
end %class