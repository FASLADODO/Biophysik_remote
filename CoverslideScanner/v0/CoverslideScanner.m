classdef CoverslideScanner < handle
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    %% v1:BUG fixing
    
    properties(Transient)
        WorkPath
        
        hFig
        
        NAVI = struct(...
            'hRoi',[])
        BAR
        
        GUI;
        
        Acq = struct(...
            'ScanSize',10,...
            'LaserWvlnth',405,...
            'z_fluor_est', [],...
            'z_shift', []) %[nm]
        
        Analysis = struct( ...
            'DIC', struct('bw_img', [],...
                          'scan_cc', [],...
                          'img_stack', [],...
                          'bw_stack_scan', [],...
                          'bw_stack_eval', [],...
                          'stack_cc', [],...
                          'test', struct('test_block', 2,...
                                         'entropy_window', 9,...
                                         'model', 'otzu',...
                                         'threshold', [],...
                                         'gmm', [],...
                                         'imgOV', [],...
                                         'img_entropy', [],...
                                         'bw_img', []) ),...
            'Fluorescence', struct( 'img_stack', [],...
                                    'bw_stack', [],...
                                    'dims_dict_um', [[10, 5]; [5, 2]; [15, 10]; [40, 3]; [60 10]], ... %[um]
                                    'stats', struct('mean',[],...
                                                    'var', [],...
                                                    'max', [],...
                                                    'stripe_thetas', [],...
                                                    'stripe_widths', [] ,...
                                                    'score', [],...
                                                    'score_rank', [],...
                                                    'mean_rank', [] ),...
                          'test', struct('theta', 0,...
                                         'stripe_width', 25,...
                                         'space_width', 50 ) ),...
            'parameters', struct( 'entropy_window', 9,...
                                  'eval_img_dims', [600 600],...
                                  'eval_scan_dims', [],...
                                  'resize_ratio', [],...
                                  'model', [] ),...
            'state_data', [],...
            'output_dir', pwd,...
            'filepaths', [] );
        
        MICMAN
    end %properties
    
    methods
        %constructor
        function this = CoverslideScanner
            warning('off','MATLAB:nargchk:deprecated')
            
            this.WorkPath = pwd;
            addpath(genpath(this.WorkPath))
            
            this.MICMAN = classMicroManagerWrapper;
            
            this.Acq.LiveViewTimer = timer(...
                'BusyMode','drop',...
                'ExecutionMode','fixedSpacing',...
                'Period',0.06,...
                'StartFcn',@(src,evnt)start_live_view(this),...
                'TimerFcn',@(src,evnt)update_live_view(this),...
                'StopFcn',@(src,evnt)stop_live_view(this));
            
            figPos = set_figure_position(1.618,0.6,'center');
            this.hFig = figure(...
                'Units','pixels',...
                'Name','Coverslide Scanner (Version: 1)',...
                'NumberTitle', 'off',...
                'DockControls', 'off',...
                'MenuBar','none',...
                'Toolbar','none',...
                'Color','w',...
                'KeyPressFcn',@(src,evnt)proc_keyboard(this,evnt),...
                'Position',figPos-[0 0 10 10],...
                'IntegerHandle','off',...
                'Visible','on');
            
            %--------------------------------------------------------------
            
            this.GUI.hTabGrp = uitabgroup(this.hFig,...
                'Parent', this.hFig,...
                'Units','normalized',...
                'Position',[0 0 2/3 1],...
                'SelectionChangedFcn',@(src,evnt)set_tab(this,evnt));
            
            %--------------------------------------------------------------
            
            tab = uitab(this.GUI.hTabGrp,...
                'BackgroundColor','w',...
                'Title','Profile');
            
            this.GUI.hAxProfile = axes(...
                'Parent',tab,...
                'Units','normalized',...
                'OuterPosition', [0 0.2 1 0.8],...
                'Box','on');
            
            [~,temp] = dos('getmac');
            
            if( length(temp) > 240 && strcmp( temp(239:255), '08-62-66-B8-34-DD' ) )
                img = zeros( 600,600 );
            else
                img = imread('\\wsvbp\bp-matlab-tools$\CoverslideScanner\Setup.png');
            end
            imagesc(img,...
                'Parent',this.GUI.hAxProfile)
            
            this.GUI.hPushSwitchProfile = uicontrol(...
                'Parent', tab,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0,0,0.15,0.05],...
                'String', sprintf('Profile:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor','w',...
                'HorizontalAlignment', 'center',...
                'Callback', @(src,evnt)load_profile(this));
            
            profile = fullfile(this.MICMAN.MicManPath,this.MICMAN.Profile);
            if not(exist(profile,'file')==2)
                profile = '';
            end %if
            
            this.GUI.hEditProfile = uicontrol(...
                'Parent', tab,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.15,0,0.6,0.05],...
                'String', profile,...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor','w',...
                'HorizontalAlignment', 'center');
            
            this.GUI.hToggleInitMM = uicontrol(...
                'Parent', tab,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.05],...
                'String', 'Initialize µManager',...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',[1 0.5 0.5],...
                'HorizontalAlignment', 'center',...
                'Callback', @(src,evnt)initialize_micro_manager(this,src));
            
            axis(this.GUI.hAxProfile,'image','ij','off')
            
            %--------------------------------------------------------------
            
            tab = uitab(this.GUI.hTabGrp,...
                'BackgroundColor','w',...
                'Title','Coverslide Scan');
            
            this.GUI.hAxFocus = axes(...
                'Parent',tab,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.GUI.hImgFocus = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.hAxFocus);
            
            this.GUI.hLineScanPath = line(...
                'Parent',this.GUI.hAxFocus,...
                'xdata',[],'ydata',[],...
                'color','r',...
                'marker','.',...
                'markersize',20,...
                'linewidth',2,...
                'linestyle','-');
            
            xlabel(this.GUI.hAxFocus,'x-x_0 [µm]')
            ylabel(this.GUI.hAxFocus,'y-y_0 [µm]')
            
            colormap(this.GUI.hAxFocus,gray(256))
            axis(this.GUI.hAxFocus,'image','xy')
            
            %--------------------------------------------------------------
            
            tab = uitab(this.GUI.hTabGrp,...
                'BackgroundColor','w',...
                'Title','Live View');
            
            this.GUI.hAxLive = axes(...
                'Parent',tab,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.GUI.hImgLive = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.hAxLive);
            
            xlabel(this.GUI.hAxLive,'x-position')
            ylabel(this.GUI.hAxLive,'y-position')
            
            colormap(this.GUI.hAxLive,gray(256))
            axis(this.GUI.hAxLive,'image','ij')
            
            %------------------------------------------------------------
            %% analysis controls
            analysis_tab = uitab(this.GUI.hTabGrp,...
                'BackgroundColor','w',...
                'Title','Analysis View');
            setup_analysis_layout(this, analysis_tab);
            
            controls_panel = uipanel( this.GUI.hAnalysisSidebar,...
                'Units','normalized',...
                'Position',[0 4/5 1 1/5],...
                'backgroundcolor','w',...
                'BorderType', 'beveledout',...
                'BorderWidth', 5); 
            
            setup_analysis_controls( this, controls_panel );
            
            %--------------------------------------------------------------
 %%           
            this.GUI.hPanelSidebar = uipanel(...
                'Parent', this.hFig,...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[2/3 0.05 1/3 0.95]);
            
            objMasterPanel = classMasterPanel(this);
            
            objPanelSel = add_param_panel(objMasterPanel,'MainPanelHeight',1,...
                'Title','Navigation','IsExpandable',true,'IsExpanded',false);
            objPanelNavSpace = add_param_subpanel(objPanelSel,'MainPanelHeight',450);
            
            objPanelAcq = add_param_panel(objMasterPanel,'MainPanelHeight',1,...
                'Title','Acquisition','IsExpandable',true,'IsExpanded',true);
            objPanelImgSize = add_param_subpanel(objPanelAcq,'MainPanelHeight',80,'IsExpandable',true);
            objPanelCamIlluArea = add_param_subpanel(objPanelImgSize,'MainPanelHeight',450);
            objPanelScanSize = add_param_subpanel(objPanelAcq,'MainPanelHeight',80);
            objPanelExpTime = add_param_subpanel(objPanelAcq,'MainPanelHeight',80);
            objPanelAcqMode = add_param_subpanel(objPanelAcq,'MainPanelHeight',40);
            objPanelCleanupFilterButton = add_param_subpanel(objPanelAcq,'MainPanelHeight',40);
            
            objPanelDIC = add_param_subpanel(objPanelAcq,'MainPanelHeight',1,...
                'Title','DIC Settings','IsExpandable',true);
            objPanelLampVoltage = add_param_subpanel(objPanelDIC,'MainPanelHeight',80);
            objPanelDicFlatField = add_param_subpanel(objPanelDIC,'MainPanelHeight',40,'IsExpandable',true);
            objPanelDicBg = add_param_subpanel(objPanelDicFlatField,'MainPanelHeight',450);
            objPanelDicBgSample = add_param_subpanel(objPanelDicFlatField,'MainPanelHeight',40);
            
            objPanelFluor = add_param_subpanel(objPanelAcq,'MainPanelHeight',1,...
                'Title','Fluorescense Settings','IsExpandable',true,'IsExpanded',false);
            objPanelLaserLine = add_param_subpanel(objPanelFluor,'MainPanelHeight',40);
            objPanelLaserPowerButton = add_param_subpanel(objPanelFluor,'MainPanelHeight',40);
            objPanelLaserAttenuation = add_param_subpanel(objPanelFluor,'MainPanelHeight',80);
            
            objPanelZDC = add_param_subpanel(objPanelAcq,'MainPanelHeight',1,...
                'Title','Auto-Focus','IsExpandable',true,'IsExpanded',false);
            objPanelZdcSearchRange = add_param_subpanel(objPanelZDC,'MainPanelHeight',80);
            objPanelZdcOffset = add_param_subpanel(objPanelZDC,'MainPanelHeight',80);
            objPanelZdcLock = add_param_subpanel(objPanelZDC,'MainPanelHeight',40);
            
            objPanelScan = add_param_panel(objMasterPanel,'MainPanelHeight',40);
            
            initialize_param_ui(objMasterPanel,this.GUI.hPanelSidebar)
            finalize_param_ui(objMasterPanel)
            
            %--------------------------------------------------------------
            this.GUI.NAVI.hAx = axes(...
                'Parent',objPanelNavSpace.hMainPanel,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.GUI.NAVI.hImg = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.NAVI.hAx);
            
            xlabel(this.GUI.NAVI.hAx,'x-position')
            ylabel(this.GUI.NAVI.hAx,'y-position')
            
            colormap(this.GUI.NAVI.hAx,gray(256))
            
            axis(this.GUI.NAVI.hAx,'xy','image')
            
            this.NAVI.hRoi = imrect(this.GUI.NAVI.hAx,[0 0 1 1]);
            hList = get(this.NAVI.hRoi,'Children');
            set(hList([5 7 9 11]),...
                'LineWidth',3,...
                'LineStyle','-',...
                'Color','m')
            set(hList([1:4 6 8 10 12]),...
                'MarkerSize',10,...
                'MarkerFaceColor', 'm',...
                'MarkerEdgeColor', 'm')
            set(hList([14 15]),...
                'LineStyle','none')
            set(hList(13),...
                'UIContextMenu',[])
            addNewPositionCallback(this.NAVI.hRoi,@(pos)update_navi_focus(this,pos));
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelImgSize.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Image Size [px]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelImgSize.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderImgSize = uicontrol(...
                'Parent', objPanelImgSize.hMainPanel,...
                'Style', 'slider',...
                'Min',2,...
                'Max',2048,...
                'SliderStep',[2 50]/(2048-2),...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderImgSize,'ContinuousValueChange',...
                @(src,event)set_img_size(this,src));
            this.GUI.hEditImgSize = uicontrol(...
                'Parent', objPanelImgSize.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Callback', @(src,evnt)set_img_size(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hAxCamIlluArea = axes(...
                'Parent',objPanelCamIlluArea.hMainPanel,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.GUI.hImgCamIlluArea = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.hAxCamIlluArea);
            
            title(this.GUI.hAxCamIlluArea,'Camera Chip Illuminated Area')
            
            colormap(this.GUI.hAxCamIlluArea,[0 0 0; 1 1 0])
            
            axis(this.GUI.hAxCamIlluArea,'ij','image','off')
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelScanSize.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Scan Size:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelScanSize.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderScanSize = uicontrol(...
                'Parent', objPanelScanSize.hMainPanel,...
                'Style', 'slider',...
                'Min',1,...
                'Max',20,...
                'SliderStep',[1 3]/(20-1),...
                'Value', 10,...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderScanSize,'ContinuousValueChange',...
                @(src,event)set_scan_size(this,src));
            this.GUI.hEditScanSize = uicontrol(...
                'Parent', objPanelScanSize.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'String', 10,...
                'Callback', @(src,evnt)set_scan_size(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelExpTime.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Exposure Time [ms]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelExpTime.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderExpTime = uicontrol(...
                'Parent', objPanelExpTime.hMainPanel,...
                'Style', 'slider',...
                'Min',0,...
                'Max',1000,...
                'SliderStep',[1 10]/1000,...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderExpTime,'ContinuousValueChange',...
                @(src,event)set_exp_time(this,src));
            this.GUI.hEditExpTime = uicontrol(...
                'Parent', objPanelExpTime.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Callback', @(src,evnt)set_exp_time(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelAcqMode.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0,0.5,1],...
                'String', sprintf('Acquisition Mode:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelAcqMode.BackgroundColor,...
                'HorizontalAlignment', 'center');
            
            this.GUI.hDropAcqMode = uicontrol_popupmenu_wrapper(...
                'Parent',objPanelAcqMode.hMainPanel,...
                'Units','normalized',...
                'Position', [0.5 0 0.5 1],...
                'FontUnits','normalized',...
                'String',{'DIC','Fluorescense'},...
                'Value',1,...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hToggleCleanupFilterButton = uicontrol(...
                'Parent',objPanelCleanupFilterButton.hMainPanel,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0,0,1,1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Calibrate CellSens Cleanup Filter Button',...
                'BackgroundColor',[1 0.5 0.5],...
                'Callback', @(src,evnt)set_pos_cleanup_filter_button(this),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelLampVoltage.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Lamp Intensity [Volt]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelLampVoltage.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderLampVoltage = uicontrol(...
                'Parent', objPanelLampVoltage.hMainPanel,...
                'Style', 'slider',...
                'Min',0,...
                'Max',12,...
                'SliderStep',[0.1 0.5]/12,...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderLampVoltage,'ContinuousValueChange',...
                @(src,event)set_dic_lamp_voltage(this,src));
            this.GUI.hEditLampVoltage = uicontrol(...
                'Parent', objPanelLampVoltage.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Callback', @(src,evnt)set_dic_lamp_voltage(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hCheckFlatFieldCorr = uicontrol(...
                'Parent',objPanelDicFlatField.hMainPanel,...
                'Style', 'checkbox',...
                'Units','normalized',...
                'Position', [0.05,0,1,1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', ' Apply Flat-Field Correction',...
                'Backgroundcolor',objPanelDicFlatField.BackgroundColor,...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hAxDicBg = axes(...
                'Parent',objPanelDicBg.hMainPanel,...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'Box','on');
            
            this.GUI.hImgDicBg = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.hAxDicBg);
            
            colormap(this.GUI.hAxDicBg,gray(256))
            
            axis(this.GUI.hAxDicBg,'xy','image','off')
            
            %--------------------------------------------------------------
            this.GUI.hPushDicBgSample = uicontrol(...
                'Parent',objPanelDicBgSample.hMainPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0,0,1,1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Sample Background',...
                'Callback', @(src,evnt)get_dic_bg(this),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelLaserLine.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0,0.5,1],...
                'String', sprintf('Laser Wavelength [nm]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelLaserLine.BackgroundColor,...
                'HorizontalAlignment', 'center');
            
            this.GUI.hDropLaserWvlnth = uicontrol_popupmenu_wrapper(...
                'Parent',objPanelLaserLine.hMainPanel,...
                'Units','normalized',...
                'Position', [0.5 0 0.5 1],...
                'FontUnits','normalized',...
                'String',{'405','488','561','640'},...
                'Value',1,...
                'Callback', @(src,evnt)set_fluor_laser_line(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hToggleLaserPowerButton = uicontrol(...
                'Parent',objPanelLaserPowerButton.hMainPanel,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0,0,1,1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Calibrate CellSens Laser Power Button',...
                'BackgroundColor',[1 0.5 0.5],...
                'Callback', @(src,evnt)set_pos_laser_power_button(this),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelLaserAttenuation.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Laser Attenuation [%%]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelLaserAttenuation.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderLaserAttenuation = uicontrol(...
                'Parent', objPanelLaserAttenuation.hMainPanel,...
                'Style', 'slider',...
                'Min',0,...
                'Max',100,...
                'SliderStep',[1 10]/100,...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderLaserAttenuation,'ContinuousValueChange',...
                @(src,event)set_laser_attenuation(this,src));
            this.GUI.hEditLaserAttenuation = uicontrol(...
                'Parent', objPanelLaserAttenuation.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Callback', @(src,evnt)set_laser_attenuation(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelZdcSearchRange.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Focus Search Range [µm]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelZdcSearchRange.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderZdcSearchRange = uicontrol(...
                'Parent', objPanelZdcSearchRange.hMainPanel,...
                'Style', 'slider',...
                'Min',0,...
                'Max',1000,...
                'SliderStep',[10 100]/1000,...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderZdcSearchRange,'ContinuousValueChange',...
                @(src,event)set_zdc_search_range(this,src));
            this.GUI.hEditZdcSearchRange = uicontrol(...
                'Parent', objPanelZdcSearchRange.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Callback', @(src,evnt)set_zdc_search_range(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            uicontrol(...
                'Parent', objPanelZdcOffset.hMainPanel,...
                'Style', 'Edit',...
                'Enable','inactive',...
                'Units','normalized',...
                'Position', [0,0.5,1,0.5],...
                'String', sprintf('Offset [AU]:'),...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Backgroundcolor',objPanelZdcOffset.BackgroundColor,...
                'HorizontalAlignment', 'center');
            this.GUI.hSliderZdcOffset = uicontrol(...
                'Parent', objPanelZdcOffset.hMainPanel,...
                'Style', 'slider',...
                'Min',0,...
                'Max',2080,...
                'SliderStep',[10 100]/2080,...
                'Units', 'normalized',...
                'Position', [0,0,0.75,0.5],...
                'Enable','off');
            addlistener(this.GUI.hSliderZdcOffset,'ContinuousValueChange',...
                @(src,event)set_zdc_offset(this,src));
            this.GUI.hEditZdcOffset = uicontrol(...
                'Parent', objPanelZdcOffset.hMainPanel,...
                'Style', 'edit',...
                'Units','normalized',...
                'Position', [0.75,0,0.25,0.5],...
                'FontUnits','normalized',...
                'FontSize',0.5,...
                'Callback', @(src,evnt)set_zdc_offset(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hToggleActZdc = uicontrol(...
                'Parent',objPanelZdcLock.hMainPanel,...
                'Style', 'togglebutton',...
                'Units','normalized',...
                'Position', [0,0,1,1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Activate Auto-Focus',...
                'BackgroundColor',[1 0.5 0.5],...
                'Callback', @(src,evnt)set_zdc_state(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            this.GUI.hPushStartScan = uicontrol(...
                'Parent',objPanelScan.hMainPanel,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0,0,1,1],...
                'FontUnits','normalized',...
                'FontSize', 0.5,...
                'String', 'Scan Coverslide',...
                'Callback', @(src,evnt)scan_coverslide(this,src),...
                'Enable','off');
            
            %--------------------------------------------------------------
            
            hPanel = uipanel(...
                'Parent', this.hFig,...
                'Units','normalized',...
                'backgroundcolor','w',...
                'Position',[2/3 0 1/3 0.05]);
            
            this.BAR.hAx = axes(...
                'Parent',hPanel,...
                'Units','normalized',...
                'Position', [0 0 1 1],...
                'TickLength',[0 0],...
                'Box','on',...
                'XTickLabel','off',...
                'YTickLabel','off');
            
            this.BAR.hPatch = patch(...
                'xdata',[0 0 0 0],...
                'ydata',[0 0 1 1],...
                'facecolor','r');
            
            this.BAR.hText = text(0.01,0.5,'',...
                'FontUnits','normalized',...
                'FontSize',0.7);
            
            axis(this.BAR.hAx,[0 1 0 1])
            
            %%
            hToolbar = uitoolbar(...
                'Parent',this.hFig);
            
            this.NAVI.hZoom = zoom(this.hFig);
            this.NAVI.hZoom.ActionPostCallback = @(src,evnt)sync_ROI(this,src,evnt);
            uitoggletool(...
                'Parent', hToolbar,...
                'Tag','Zoom',...
                'TooltipString','Zoom',...
                'CData', reshape([NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN 0 0 0 0 0 0 NaN 0 0 0 0 0 NaN 0 NaN NaN 0 0 1 1 0 0 NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 1 1 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN 0 0 0 0 0 0 NaN 0 0 0 0 0 NaN 0 NaN NaN 0 0 1 1 0 0 NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 1 1 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN NaN 0 0 0 0 0 0 NaN 0 0 0 0 0 NaN 0 NaN NaN 0 0 1 1 0 0 NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN 0 NaN NaN NaN 0 NaN 0 0 1 1 1 1 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 1 1 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0 0 0.500000000000000 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.500000000000000 0.500000000000000 NaN NaN NaN NaN],[16 16 3]),...
                'ClickedCallback', @(src,evnt)set_zoom(this,src));
            
            this.NAVI.hPan = pan(this.hFig);
            this.NAVI.hPan.ActionPostCallback = @(src,evnt)sync_ROI(this,src,evnt);
            uitoggletool(...
                'Parent', hToolbar,...
                'Tag','Pan',...
                'TooltipString','Pan',...
                'CData', reshape([NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN 0 0 0 0 0 NaN 0 0 NaN 0 0 0 0 0 NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 0 NaN NaN NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN],[16 16 3]),...
                'ClickedCallback', @(src,evnt)set_pan(this,src));
            uipushtool(...
                'Parent', hToolbar,...
                'TooltipString','Save Results',...
                'CData', reshape([NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 NaN 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN 0 NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.630000000000000 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0.310000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN NaN 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 NaN 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN 0 NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.630000000000000 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0.310000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN NaN 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN NaN NaN 0 NaN 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 NaN 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN 0 NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0 0.190000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN 0 0.950000000000000 0.950000000000000 0.950000000000000 0 0.630000000000000 0.930000000000000 0.510000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.0400000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 0 0 0 0 0 0.630000000000000 0 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.630000000000000 0.0400000000000000 0.310000000000000 NaN 0 NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0.310000000000000 0.310000000000000 NaN NaN NaN NaN NaN NaN NaN 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 0.310000000000000 NaN NaN 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 NaN 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0],[16 16 3]),...
                'Separator','on',...
                'ClickedCallback',@(src,evnt)save_results(this));
            uipushtool(...
                'Parent', hToolbar,...
                'TooltipString','Open Documentation',...
                'CData', reshape([NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN 0 0 0 0 0 0 0 0 0 0 NaN NaN NaN NaN NaN NaN NaN NaN 0 0 0 0 0 0 NaN NaN NaN NaN NaN],[16 16 3]),...
                'Separator','on');
            
            %%
            set(this.hFig,'Visible','on',...
                'Position',figPos)
        end %fun
        function load_profile(this)
            [fileName,filePath,ext] = uigetfile(...
                '.cfg','Load µManager Profile',this.WorkPath);
            if not(ext)
                return
            end %if
            
            set(this.GUI.hEditProfile,...
                'String',fullfile(filePath,[fileName,ext]))
        end %fun
        
        %% added for analysis tab controls
        function setup_analysis_controls(this, parent)
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 2/3 1/3 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Test DIC Model',...
                'Callback', @(src,evnt)test_dic_segmentation(this));
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [1/3 2/3 1/3 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Test Stripe Model',...
                'Callback', @(src,evnt)test_fluorescence_parameters(this));
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [2/3 2/3 1/3 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Advanced Testing',...
                'Callback', @(src,evnt)advanced_parameter_test(this));
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0 1/3 1/3 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Set Parameters',...
                'Callback', @(src,evnt)set_model_parameters(this));
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [1/3 1/3 1/3 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Export model',...
                'Callback', @(src,evnt)export_model(this));
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [2/3 1/3 1/3 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Export data',...
                'Callback', @(src,evnt)export_testing_data(this));
            
            this.GUI.hSlid_threshold = uicontrol(...
                'Parent',parent,...
                'Style', 'slider',...
                'Units','normalized',...
                'Position', [0.05 0 0.4 1/10],...
                'Callback', @(src,evnt)update_threshold(this, 'dic') );
            
            this.GUI.hStr_threshold = uicontrol(...
                'Parent',parent,...
                'Style', 'text',...
                'Units','normalized',...
                'Position', [0.05 1/6 0.4 1/8],...
                'FontUnits','normalized',...
                'FontSize', 0.7,...
                'String', 'Threshold Control');
            
            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0.5 0 0.4 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'FontWeight', 'bold',...
                'String', 'Run Full Slide Scan',...
                'Callback', @(src,evnt)run_eval(this) );

            uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0.5 0 0.4 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Last',...
                'Tag', 'last_img',...
                'Visible', 'off',...
                'Callback', @(src,evnt)update_image(this, source) );
            
             uicontrol(...
                'Parent',parent,...
                'Style', 'pushbutton',...
                'Units','normalized',...
                'Position', [0.5 0 0.4 1/3],...
                'FontUnits','normalized',...
                'FontSize', 0.3,...
                'String', 'Next',...
                'Tag', 'next_img',...
                'Visible', 'off',...
                'Callback', @(src,evnt)update_image(this, source) );
            
        end
        function setup_analysis_layout(this, analysis_tab)
            this.GUI.hAnalysisSidebar = uipanel(this.hFig,...
                'Units','normalized',...
                'Position',[2/3 0.05 1/3 0.95],...
                'backgroundcolor','w');
            this.GUI.hAx_histogram = axes(...
                'Parent',this.GUI.hAnalysisSidebar,...
                'Units','normalized',...
                'OuterPosition', [0 2/5 1 2/5],...
                'Box','on' );
            
%             uicontrol(...
%                 'Parent',this.GUI.hAnalysisSidebar,...
%                 'Style', 'text',...
%                 'Units','normalized',...
%                 'Position', [1/5 19/10 4/5 1/20],...
%                 'FontUnits','normalized',...
%                 'FontSize', 0.7,...
%                 'String', 'Histogram of entropy image');
            
            this.GUI.hAx_bwOverview = axes(...
                'Parent',this.GUI.hAnalysisSidebar,...
                'Units','normalized',...
                'Position', [0 0 1 2/5],...
                'Box','on',...
                'XTickLabel', '',...
                'YTickLabel', '',...
                'XTick', [],...
                'YTick', []);
            colormap( this.GUI.hAx_bwOverview, 'gray' )
            this.GUI.hImg_bw = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.hAx_bwOverview);
            
            this.GUI.hAx_segmentedOverview = axes(...
                'Parent',analysis_tab,...
                'Units','normalized',...
                'Position', [0 0 1 1],...
                'Box','on',...
                'XTickLabel', '',...
                'YTickLabel', '',...
                'XTick', [],...
                'YTick', []);
            colormap( this.GUI.hAx_segmentedOverview, 'gray' )
            this.GUI.hImg_segged = imagesc(...
                'xdata',[],'ydata',[],'cdata',[],...
                'Parent',this.GUI.hAx_segmentedOverview);
        end
        
        %% getter
        function x = get_img_size(this)
            ROI = get_camera_ROI(this.MICMAN); %[i0,j0,w,h]
            x = unique(ROI(3:4));
            if numel(x) > 1
                %image width and height not equal
            end %if
        end %fun
        %         function x = get_exp_time(this)
        %             x = get_exposure_time(this.MICMAN); %[ms]
        %         end %fun
        
        function x = get_acq_mode(this)
            option = get(this.GUI.hDropAcqMode,'String');
            selection = get(this.GUI.hDropAcqMode,'Value');
            x = option{selection};
        end %fun
        
        function [ovHeight,ovWidth] = get_overview_size(this,unit)
            imgSize = get_img_size(this);
            
            ovHeight = this.Acq.ScanSize*imgSize; %[px]
            ovWidth = this.Acq.ScanSize*imgSize; %[px]
            
            if strcmp(unit,'µm')
                pxSize = get_img_px_size(this.MICMAN);
                
                ovHeight = ovHeight*pxSize; %[µm]
                ovWidth = ovWidth*pxSize; %[µm]
            end %if
        end %fun
        
        function dic_scan = get_dic_scan_img(this, testBool)
            dic_scan = this.Acq.imgOV;
        end
        function get_dic_bg(this)
            set_filter_revolver_position(this.MICMAN,5)
            set_cleanup_filter_set(this.MICMAN.CleanupFilter,5) %remove any cleanup filter
            set_transmission_lamp_shutter_state(this.MICMAN,1)
            
            %%
            this.Acq.ImgDicBg = snap_img(this.MICMAN);
            
            set(this.GUI.hImgDicBg,...
                'cdata',this.Acq.ImgDicBg)
            
            %%
            set_transmission_lamp_shutter_state(this.MICMAN,0)
        end %fun
        
        function laser = get_laser(this)
            laser = this.Acq.LaserWvlnth;
        end
        
        function get_z_focus_plane_fluorescence(this, z0)
           
            z_diff = -2:.2:2;
            set_objective_stage_z_position_micron(this.MICMAN,z0)
            grad_vec = zeros( length( z_diff, 1 ) );
            for i =  1:length( z_diff )
               
                z = z0 + zdiff;
                % should probably set laser power to low here
                set_objective_stage_z_position_micron(this.MICMAN,z) 
                [img,~] = snap_img_fluorescence(this.MICMAN,laser);
                grad_vec(i) = mean( imgradient( img ) );
            end
            
            this.z_fluor_est = z0 + z_diff( grad_vec == max(grad_vec) );
        end
        
        function get_z_optimal_plane_iterative(this, num_iterations)
            
            z0 = this.Acq.z_fluor_est;
            inc = -.8:.4:.8;
            grad_vec = zeros( length(inc), 1 );
            done_flag = 0;
            while(~done_flag)
                for i = length(inc)
                    z = z0 + inc(i);
                    set_objective_stage_z_position_micron(this.MICMAN,z);
                    % should probably set laser power to low here
                    [img,~] = snap_img_fluorescence(this.MICMAN,laser);             
                    grad_vec(i) = mean( imgradient( img ) );
                end
                opt_idx = find( grad_vec == max( grad_vec ) );
                if( opt_idx == 1 || opt_idx == length( inc ) )
                    z0 = z0 + inc(opt_idx);
                    grad_vec = zeros( length(inc), 1 );
                    continue
                else
                   inc = inc( opt_idx-1:opt_idx+1 );
                   if( inc(1) > inc(3) )
                       inc = inc(1:2);
                   else
                       inc = inc(2:3); 
                   end
                   done_flag = 1;
                end
            end
            
            for zz = 1:num_iterations
                inc = [inc(1), inc(1) + .5*(inc(3)-inc(1)), inc(3)];
                inc = sort(inc);
                for i = length(inc)
                    z = z0 + inc(i);
                    set_objective_stage_z_position_micron(this.MICMAN,z);
                    % should set laser power to low here
                    [img,~] = snap_img_fluorescence(this.MICMAN,laser);             
                    grad_vec(i) = mean( imgradient( img ) );
                end
%                 opt_idx = find( grad_vec == max( grad_vec ) );
                [~, sorted_idx] = sort( grad_vec, 'descend' );
                inc = sort( inc( sorted_idx(1:2) ) ); % to keep z increment
                                                      % in ascending order
                if( diff(inc) <= 0.1 )
                    continue
                end
            end
            
            z_shift_est = mean( inc );
            append_z_shift_vec( this, z_shift_est );            
            
        end
        
        
        function get_z_optimal_plane_polyfit(this)
            
            z0 = this.Acq.z_fluor_est;
            inc = -.8:.4:.8;
            inc_order = [3 4 2 1 5]; % trying to choose acquisition order
            inc_order_inv = [4 3 1 2 5];% to optimally account for bleaching
%             inc = inc( inc_order ); 
            grad_vec = zeros( 3, 1 );
            for i = length(inc)
                z = z0 + inc(inc_order(i));
                set_objective_stage_z_position_micron(this.MICMAN,z);
                % should set laser power to low here
                [img,~] = snap_img_fluorescence(this.MICMAN,laser);             
                grad_vec(inc_order_inv(i)) = mean( imgradient( img ) );
            end

            p = polyfit( inc, grad_vec, 2 );
            z_shift_est = -p(2)/(2*p(1)); % analytical maximum based on polynomial

            append_z_shift_vec( this, z_shift_est );

        end
        
        %% setter
        function set_img_size(this,x)
            if ishandle(x)
                switch get(x,'Style')
                    case 'slider'
                        x = get(x,'Value');
                    case 'edit'
                        x = str2double(get(x,'String'));
                end %switch
            end %if
            x = round(x);
            
            if mod(x,2) %check if odd
                x = x + 1; %make it even
            end %if
            
            %%
            %             if get_img_size(this) ~= x
            x0 = (2048-x)/2;
            set_camera_ROI(this.MICMAN,[x0 x0 x x])
            
            set(this.GUI.hEditImgSize,'String',x)
            set(this.GUI.hSliderImgSize,'Value',x)
            
            %%
            update_cam_illu_area(this)
            update_scan_path(this)
            %             end %if
        end %fun
        function set_scan_size(this,x)
            if ishandle(x)
                switch get(x,'Style')
                    case 'slider'
                        x = get(x,'Value');
                    case 'edit'
                        x = str2double(get(x,'String'));
                end %switch
            end %if
            x = round(x);
            
            %%
            if this.Acq.ScanSize ~= x
                this.Acq.ScanSize = x;
                
                set(this.GUI.hEditScanSize,'String',x)
                set(this.GUI.hSliderScanSize,'Value',x)
                
                %%
                initialize_overview_scan(this)
                update_scan_path(this)
            end %if
        end %fun
        
        function set_exp_time(this,x)
            if ishandle(x)
                switch get(x,'Style')
                    case 'slider'
                        x = get(x,'Value');
                    case 'edit'
                        x = str2double(get(x,'String'));
                end %switch
            end %if
            x = round(x);
            
            %%
            if get_exposure_time(this.MICMAN) ~= x
                set_exposure_time(this.MICMAN,x) %[ms]
                
                set(this.GUI.hEditExpTime,'String',x)
                set(this.GUI.hSliderExpTime,'Value',x)
            end %if
        end %fun
        
        function set_dic_lamp_voltage(this,x)
            if ishandle(x)
                switch get(x,'Style')
                    case 'slider'
                        x = get(x,'Value');
                    case 'edit'
                        x = str2double(get(x,'String'));
                end %switch
            end %if
            
            %%
            %             if get_transmission_lamp_voltage(this.MICMAN) ~= x
            set_transmission_lamp_voltage(this.MICMAN,x) %[ms]
            
            set(this.GUI.hEditLampVoltage,'String',x)
            set(this.GUI.hSliderLampVoltage,'Value',x)
            %             end %if
        end %fun
        
        function set_zdc_search_range(this,x)
            if ishandle(x)
                switch get(x,'Style')
                    case 'slider'
                        x = get(x,'Value');
                    case 'edit'
                        x = str2double(get(x,'String'));
                end %switch
            end %if
            
            %%
            %             if get_auto_focus_search_range(this.MICMAN) ~= x
            set_auto_focus_search_range(this.MICMAN,x) %[ms]
            
            set(this.GUI.hEditZdcSearchRange,'String',x)
            set(this.GUI.hSliderZdcSearchRange,'Value',x)
            %             end %if
        end %fun
        function set_zdc_offset(this,x)
            if ishandle(x)
                switch get(x,'Style')
                    case 'slider'
                        x = get(x,'Value');
                    case 'edit'
                        x = str2double(get(x,'String'));
                end %switch
            end %if
            
            %%
            %             if get_auto_focus_offset(this.MICMAN) ~= x
            set_auto_focus_offset(this.MICMAN,x) %[ms]
            
            set(this.GUI.hEditZdcOffset,'String',x)
            set(this.GUI.hSliderZdcOffset,'Value',x)
            %             end %if
        end %fun
        function set_zdc_state(this,x)
            if ishandle(x)
                x = get(x,'Value');
            end %if
            
            if x == 1 %switch ZDC auto-focus on
                scan_and_lock_into_auto_focus(this.MICMAN)
                
                if get_auto_focus_state(this.MICMAN)
                    set(this.GUI.hToggleActZdc,...
                        'BackgroundColor',[0.5 1 0.5])
                else %ZDC auto-focus not estabished successfully
                    set(this.GUI.hToggleActZdc,...
                        'Value',0,...
                        'BackgroundColor',[1 0.5 0.5])
                end %if
            else %switch ZDC auto-focus off
                set_auto_focus_state(this.MICMAN,0)
                
                set(this.GUI.hToggleActZdc,...
                    'BackgroundColor',[1 0.5 0.5])
            end %if
        end %fun
        
        function set_fluor_laser_line(this,x)
            if ishandle(x)
                option = get(x,'String');
                selection = get(x,'Value');
                x = str2double(option{selection});
            end %if
            
            %%
            %             if this.Acq.LaserWvlnth ~= x
            this.Acq.LaserWvlnth = x;
            set(this.GUI.hToggleLaserPowerButton,...
                'BackgroundColor',[1 0.5 0.5])
            %             end %if
        end %fun
        
        function set_pos_cleanup_filter_button(this)
            update_screen_shot(this.MICMAN.ScreenShot)
            cleanup_filter_dropdown_pos(this.MICMAN.CleanupFilter)
            
            set(this.GUI.hToggleCleanupFilterButton,...
                'BackgroundColor',[0.5 1 0.5])
        end %fun
        
        function set_pos_laser_power_button(this)
            update_screen_shot(this.MICMAN.ScreenShot)
            set_laser_state_toggle_pos(this.MICMAN.Laser,...
                this.Acq.LaserWvlnth)
            
            set(this.GUI.hToggleLaserPowerButton,...
                'BackgroundColor',[0.5 1 0.5])
        end %fun
        
        function set_tab(this,evnt)
            switch get(evnt.NewValue,'Title')
                case 'Live View'
                    set(this.GUI.hAnalysisSidebar,...
                        'visible','off')
                    set(this.GUI.hPanelSidebar,...
                        'visible','on')
                    set(this.GUI.hTabGrp,...
                        'Position',[0 0 2/3 1])
                    start(this.Acq.LiveViewTimer);
                case 'Analysis View'
                    set(this.GUI.hPanelSidebar,...
                        'visible','off')
                    set(this.GUI.hAnalysisSidebar,...
                        'visible','on')
%                     set(this.GUI.hTabGrp,...
%                         'Position',[0 0 3/4 1])
                otherwise
                    set(this.GUI.hAnalysisSidebar,...
                        'visible','off')
                    set(this.GUI.hPanelSidebar,...
                        'visible','on')
                    set(this.GUI.hTabGrp,...
                        'Position',[0 0 2/3 1])
                    stop(this.Acq.LiveViewTimer);
            end %switch
        end %fun
        
        
        function set_analysis_stats( this, idx, score, thetaD, width_guess, num_stripes )
            this.Analysis.Fluorescence.stats(idx).score = score;
%             this.Analysis.Fluorescence.stats(idx).mean = img_stats.mean;
%             this.Analysis.Fluorescence.stats(idx).var = img_stats.var;
%             this.Analysis.Fluorescence.stats(idx).max = img_stats.max;
            this.Analysis.Fluorescence.stats(idx).theta = thetaD;
            this.Analysis.Fluorescence.stats(idx).stripe_width = width_guess;
            this.Analysis.Fluorescence.stats(idx).num_stripes = num_stripes;
        end
        
        
        
        %% updater
        function update_navi_focus(this,pos)
            set(this.GUI.hAxFocus,...
                'xlim',[pos(1) pos(1)+pos(3)],...
                'ylim',[pos(2) pos(2)+pos(4)])
        end %fun
        
        function update_cam_illu_area(this)
            imgSize = get_img_size(this);
            x0 = (2048-imgSize)/2;
            
            img = false(2048,2048);
            img(x0+1:2048-x0,x0+1:2048-x0) = true;
            
            set(this.GUI.hImgCamIlluArea,...
                'xdata',1:2048,...
                'ydata',1:2048,...
                'cdata',img)
        end %fun
        
        function initialize_overview_scan(this)
            pxSize = get_img_px_size(this.MICMAN);
            [totalHeight,totalWidth] = get_overview_size(this,'µm'); %[µm]
            
            this.Acq.imgOV = uint16(nan(totalHeight/pxSize,totalWidth/pxSize)*2^16);
            
            set(this.GUI.hImgFocus,...
                'xdata',(-totalWidth/2:totalWidth/2),...
                'ydata',(-totalHeight/2:totalHeight/2),...
                'cdata',this.Acq.imgOV)
            set(this.GUI.NAVI.hImg,...
                'xdata',(-totalWidth/2:totalWidth/2),...
                'ydata',(-totalHeight/2:totalHeight/2),...
                'cdata',this.Acq.imgOV)
            
            %%
            fcn = makeConstrainToRectFcn('imrect',...
                [(-totalWidth/2)-0.5,(totalWidth/2)+0.5],...
                [(-totalHeight/2)-0.5,(totalHeight/2)+0.5]);
            setPositionConstraintFcn(this.NAVI.hRoi,fcn);
            setPosition(this.NAVI.hRoi,...
                [(-totalWidth/2)-0.5,(-totalHeight/2)-0.5,...
                totalWidth,totalHeight])
        end %fun
        function update_scan_path(this)
            posStageCtr = get_central_xy_pos(this.MICMAN); %[x0,y0]
            
            [x,y,bad] = set_rectangular_path(this.MICMAN,...
                this.Acq.ScanSize,this.Acq.ScanSize);
            
            set(this.GUI.hLineScanPath,...
                'xdata',x-posStageCtr(1),...
                'ydata',y-posStageCtr(2))
            
            %%
            [totalHeight,totalWidth] = get_overview_size(this,'µm');
            
            set(this.GUI.hAxFocus,...
                'xlim',[-totalWidth/2 totalWidth/2],...
                'ylim',[-totalHeight/2 totalHeight/2])
        end %fun
        
        function scan_overview(this)
            start_live_view(this)
            
            %%
            [x,y,bad] = set_rectangular_path(this.MICMAN,...
                this.Acq.ScanSize,this.Acq.ScanSize);
            [totalHeight,totalWidth] = get_overview_size(this,'px');
            
            for idxPos = 1:sum(not(bad(:)))
                set_xy_pos_micron(this.MICMAN,[x(idxPos) y(idxPos)]) %move stage
                pause(0.1) %delay for the auto-focus to adapt
                
                %%
                img = snap_img(this.MICMAN);
                
                if get(this.GUI.hCheckFlatFieldCorr,'value')
                    img = img - this.Acq.ImgDicBg;
                end %if
                
                [j,i] = scan_center_to_img_idx(...
                    this.MICMAN,x(idxPos),y(idxPos),...
                    this.Acq.ScanSize,this.Acq.ScanSize);
                idx = sub2ind([totalHeight,totalWidth],i(:),j(:));
                
                this.Acq.imgOV(idx) = img(:);
                clim = nanquantile(this.Acq.imgOV,[0.01 0.99]);
                
                set(this.GUI.hImgFocus,...
                    'cdata',this.Acq.imgOV)
                set(this.GUI.NAVI.hImg,...
                    'cdata',this.Acq.imgOV)
                
                set(this.GUI.hAxFocus,'clim',clim)
                %                 caxis(this.GUI.hAxFocus,clim)
                caxis(this.GUI.NAVI.hAx,clim)
            end %for
            
            %%
            stop_live_view(this)
        end %fun
        
        function test_overview_dic(this)
           start_live_view(this)
           
           test_block_dim = this.Analysis.DIC.test.test_block;
           
            %%
            [x,y,bad] = set_rectangular_path(this.MICMAN,...
                test_block_dim, test_block_dim);
            [totalHeight,totalWidth] = get_overview_size(this,'px');
            
            for idxPos = 1:sum(not(bad(:)))
                set_xy_pos_micron(this.MICMAN,[x(idxPos) y(idxPos)]) %move stage
                pause(0.1) %delay for the auto-focus to adapt
                
                %%
                img = snap_img(this.MICMAN);
                
                if get(this.GUI.hCheckFlatFieldCorr,'value')
                    img = img - this.Acq.ImgDicBg;
                end %if
                
                [j,i] = scan_center_to_img_idx(...
                    this.MICMAN,x(idxPos),y(idxPos),...
                    this.Acq.ScanSize,this.Acq.ScanSize);
                idx = sub2ind([totalHeight,totalWidth],i(:),j(:));
                
                this.Analysis.DIC.test.imgOV(idx) = img(:);
                clim = nanquantile(this.Acq.imgOV,[0.01 0.99]);
                
                set(this.GUI.hImgFocus,...
                    'cdata',this.Analysis.DIC.test.imgOV)
                set(this.GUI.NAVI.hImg,...
                    'cdata',this.Analysis.DIC.test.imgOV)
                
                set(this.GUI.hAxFocus,'clim',clim)
                %                 caxis(this.GUI.hAxFocus,clim)
                caxis(this.GUI.NAVI.hAx,clim)
            end %for
            
            %%
            stop_live_view(this)
            
            
            
        end
        
        function start_live_view(this)
            set([this.GUI.hDropAcqMode,...
                this.GUI.hDropLaserWvlnth,...
                this.GUI.hSliderScanSize,...
                this.GUI.hEditScanSize,...
                this.GUI.hToggleCleanupFilterButton,...
                this.GUI.hToggleLaserPowerButton,...
                this.GUI.hEditLaserAttenuation,...
                this.GUI.hSliderZdcSearchRange,...
                this.GUI.hEditZdcSearchRange],...
                'Enable','off')
            switch get_acq_mode(this)
                case 'DIC'
                    set_filter_revolver_position(this.MICMAN,5)
                    set_cleanup_filter_set(this.MICMAN.CleanupFilter,5) %remove any cleanup filter
                    set_transmission_lamp_shutter_state(this.MICMAN,1)
                case 'Fluorescense'
                    set_filter_revolver_position(this.MICMAN,0)
                    set_cleanup_filter_set(this.MICMAN.CleanupFilter,...
                        this.Acq.LaserWvlnth) %put respective cleanup filter
                    set_laser_state(this.MICMAN.Laser,this.Acq.LaserWvlnth,1); %switch on laser
            end %switch
        end %fun
        function update_live_view(this)
            img = snap_img(this.MICMAN);
            img = norm2quantile(img,[0.05,0.95]);
            [imgHeight,imgWidth] = size(img);
            
            set(this.GUI.hImgLive,...
                'xdata',1:imgWidth,...
                'ydata',1:imgHeight,...
                'cdata',img)
        end %fun
        function stop_live_view(this)
            switch get_acq_mode(this)
                case 'DIC'
                    set_transmission_lamp_shutter_state(this.MICMAN,0)
                case 'Fluorescense'
                    set_laser_state(this.MICMAN.Laser,this.Acq.LaserWvlnth,0); %switch on laser
            end %switch
            set([this.GUI.hDropAcqMode,...
                this.GUI.hDropLaserWvlnth,...
                this.GUI.hSliderScanSize,...
                this.GUI.hEditScanSize,...
                this.GUI.hToggleCleanupFilterButton,...
                this.GUI.hToggleLaserPowerButton,...
                this.GUI.hEditLaserAttenuation,...
                this.GUI.hSliderZdcSearchRange,...
                this.GUI.hEditZdcSearchRange],...
                'Enable','on')
        end %fun
        
        function append_z_shift_vec( this, z_shift )
           this.Acq.z_shift = cat( 1,  this.Acq.z_shift, z_shift ); 
        end
        
        %%
        function set_zoom(this,src)
            switch get(src,'State')
                case 'on'
                    set(this.NAVI.hZoom,'Enable','on')
                case 'off'
                    set(this.NAVI.hZoom,'Enable','off')
            end %fun
        end %fun
        function set_pan(this,src)
            switch get(src,'State')
                case 'on'
                    set(this.NAVI.hPan,'Enable','on')
                case 'off'
                    set(this.NAVI.hPan,'Enable','off')
            end %fun
        end %fun
        
        function sync_ROI(this,~,evd)
            if evd.Axes == this.GUI.RAW.Donor.hAx
                xlim = get(evd.Axes,'xlim');
                ylim = get(evd.Axes,'ylim');
                setPosition(this.NAVI.hRoi,...
                    [xlim(1),ylim(1),xlim(2)-xlim(1),ylim(2)-ylim(1)])
            end %if
        end %fun
        
        function initialize_micro_manager(this,x)
            if ishandle(x)
                x = get(x,'Value');
            end %if
            
            if x == 1
                profile = get(this.GUI.hEditProfile,'String');
                [this.MICMAN.MicManPath,profileName,profileExt] = ...
                    fileparts(profile);
                this.MICMAN.Profile = [profileName profileExt];
                
                initialize_micro_manager(this.MICMAN,'')
                
                %%
                set_img_size(this,get_img_size(this))
                
                set_exp_time(this,get_exposure_time(this.MICMAN))
                
                set_dic_lamp_voltage(this,get_transmission_lamp_voltage(this.MICMAN))
                
                set_zdc_search_range(this,get_auto_focus_search_range(this.MICMAN))
                set_zdc_offset(this,get_auto_focus_offset(this.MICMAN))
                
                set_transmission_lamp_power(this.MICMAN,1) %switch on DIC lamp
                
                %%
                set([this.GUI.hEditProfile,...
                    this.GUI.hPushSwitchProfile],...
                    'Enable','off')
                
                set([this.GUI.hSliderImgSize,...
                    this.GUI.hEditImgSize,...
                    this.GUI.hSliderScanSize,...
                    this.GUI.hEditScanSize,...
                    this.GUI.hSliderExpTime,...
                    this.GUI.hEditExpTime,...
                    this.GUI.hDropAcqMode,...
                    this.GUI.hSliderLampVoltage,...
                    this.GUI.hEditLampVoltage,...
                    this.GUI.hCheckFlatFieldCorr,...
                    this.GUI.hPushDicBgSample,...
                    this.GUI.hToggleCleanupFilterButton,...
                    this.GUI.hToggleLaserPowerButton,...
                    this.GUI.hEditLaserAttenuation,...
                    this.GUI.hDropLaserWvlnth,...
                    this.GUI.hSliderZdcSearchRange,...
                    this.GUI.hEditZdcSearchRange,...
                    this.GUI.hSliderZdcOffset,...
                    this.GUI.hEditZdcOffset,...
                    this.GUI.hToggleActZdc],...
                    'Enable','on')
                
                set(this.GUI.hToggleInitMM,'BackGroundcolor',[0.5 1 0.5])
            else
                unloadAllDevices(this.MICMAN.CoreAPI)
                
                %%
                set([this.GUI.hEditProfile,...
                    this.GUI.hPushSwitchProfile],...
                    'Enable','on')
                
                set([this.GUI.hSliderImgSize,...
                    this.GUI.hEditImgSize,...
                    this.GUI.hSliderScanSize,...
                    this.GUI.hEditScanSize,...
                    this.GUI.hSliderExpTime,...
                    this.GUI.hEditExpTime,...
                    this.GUI.hDropAcqMode,...
                    this.GUI.hSliderLampVoltage,...
                    this.GUI.hEditLampVoltage,...
                    this.GUI.hCheckFlatFieldCorr,...
                    this.GUI.hPushDicBgSample,...
                    this.GUI.hToggleCleanupFilterButton,...
                    this.GUI.hToggleLaserPowerButton,...
                    this.GUI.hEditLaserAttenuation,...
                    this.GUI.hDropLaserWvlnth,...
                    this.GUI.hSliderZdcSearchRange,...
                    this.GUI.hEditZdcSearchRange,...
                    this.GUI.hSliderZdcOffset,...
                    this.GUI.hEditZdcOffset,...
                    this.GUI.hToggleActZdc],...
                    'Enable','off')
                
                set(this.GUI.hToggleInitMM,'BackGroundcolor',[1 0.5 0.5])
            end %if
        end %fun
        
        %% INFO BAR
        function set_bar_text(this,txt)
            set(this.BAR.hText,'String',txt)
            drawnow nocallbacks
        end %fun
        function set_bar_percentage(this,p)
            set(this.BAR.hPatch,'XData',[0 p p 0])
            drawnow nocallbacks
        end %fun
        
        %%
        function proc_keyboard(this,evnt)
            if isempty(evnt.Modifier)
                switch evnt.Key
                end %switch
            elseif strcmp(evnt.Modifier,'control')
                switch evnt.Key
                    case 'l'
                        load_data(this)
                    case 's'
                        save_results(this)
                end %switch
            end %if
        end %fun
        
        %% analysis
        function run_eval(this)
            init_eval(this);
            new_dims = this.Analysis.DIC.parameters.eval_img_dims;
            dic_scan = get_dic_scan_img(this);
            old_dims = get_img_size(this);
            if( length(old_dims) == 1)
                old_dims = [old_dims, old_dims];
            end
            numX = size( dic_scan, 2)/old_dims(2);
            numY = size( dic_scan, 1)/old_dims(1);
            dic_scan = resize_scan(dic_scan, old_dims, new_dims);
            eval_DIC_scan(this, img_dims);
            
            cc_stats = this.Analysis.DIC.scan_cc.stats;
            cc_stats = cc_stats( [cc_stats.keep_bool] );
            dic_stack = zeros( img_dims(1), img_dims(2), length(cc_stats), dic_scan_type );
            fluor_stack = zeros( img_dims(1), img_dims(2), length(cc_stats), fluor_scan_type );
            
            img_centers_x = zeros( length( cc_stats ), 1 );
            img_centers_y = zeros( length( cc_stats ), 1 );
            for i = 1:length( cc_stats )
                img_centers_x(i) = cc_stats(i).BB_center(1);
                img_centers_y(i) = cc_stats(i).BB_center(2);
            end
            [x,y] = image_center_to_scan_center( this, img_centers_x, img_centers_y,...
                numX, numY );
            get_ROI_images(this, x, y);
            
            this.Analysis.DIC.img_stack = dic_stack;
            this.Analysis.Fluorescence.img_stack = fluor_stack;
            scan_dims = size( dic_scan );
            eval_selected_images(this, new_dims, scan_dims, 0 );
            export_output(this);
            view_results(this);
        end
        function parameters = eval_DIC_scan(this, img_dims, dic_scan, isTest)
            if( ~exist( 'img_dims', 'var' ) )
                img_dims = get_img_size(this);
            end
            if( ~exist( 'dic_scan', 'var' ) )
                dic_scan = get_dic_scan_img(this);
                wind = this.Analysis.parameters.entropy_window;
            else
                wind = this.Analysis.DIC.test.entropy_window; 
            end
            if( length(img_dims) == 1 )
                img_dims = [img_dims, img_dims];
            end
               
            [bw_img, cc, parameters] = ...
                process_and_label_DIC( dic_scan, img_dims, wind );
            if( ~exists( 'isTest', 'var' ) || isTest == 0 )
                bw_stack = [];
                for i = 1:length(cc.stats)
                    bb = cc.stats(i).BoundingBox;
                    if( bb(3) > img_dims(2) || bb(4) > img_dims(1) )
                        cc.stats(i).keep_bool = false;
                    else
                        cc.stats(i).keep_bool = true;
                        center_pt = round(cc.stats(i).BB_center);
                        rows = [ center_pt(2)-img_dims(1)/2+1, center_pt(2)+img_dims(1)/2 ];
                        cols = [ center_pt(1)-img_dims(2)/2+1, center_pt(1)+img_dims(2)/2 ];
                        bw = zeros( size( dic_scan ), 'logical' );
                        bw = extract_subimage( bw, rows, cols );
                        bw_stack = cat( 3, bw_stack, bw );  
                    end
                end
                this.Analysis.DIC.bw_stack_scan = bw_stack;
                this.Analysis.DIC.bw_img = bw_img;
                this.Analysis.DIC.scan_cc = cc;
            else
                parameters.bw_img = bw_img;
                parameters.cc = cc;
            end
        end
        function eval_selected_images(this, img_dims, scan_dims, isTest)
            dic_stack = this.Analysis.DIC.img_stack;
%             fluor_stack = this.Analysis.Fluorescence.img_stack;
            wind = 9;
            [bw_stack, cc, parameters] = ...
                process_and_label_DIC( dic_stack, img_dims, wind, scan_dims );
            this.Analysis.DIC.stack_cc = cc;
            this.Analysis.DIC.bw_stack_eval = bw_stack;
            %             simplified_fluorescence_eval(this);
            eval_fluorescence_images(this, img_dims, isTest)
        end
        function eval_fluorescence_images(this, img_dims, isTest)
            if( ~exist( 'img_dims', 'var' ) )
                img_dims = get_img_size(this);
            end
            img_stack = this.Analysis.Fluorescence.img_stack;
            bw_dic_stack = this.Analysis.DIC.bw_stack_scan;
            img_vec = img_stack(:);
            img_vec(img_vec == 0) = [];
            intensity_thresh = multithresh( img_vec, 1 );
            size_thresh = 2000;

            for i = 1:size( img_stack, 3 )
                img = img_stack(:,:,i);
%                 figure(5), subplot(1,2,1), imshow( img, [] )
                bw_fluor = threshold_fluor_img( img, intensity_thresh, size_thresh );
                [thetaD, pattern, x_guess, width_guess] = est_pattern_orientation( img, bw_fluor );
                if( ~isempty( thetaD ) )
                    if( isTest )
                        bw_dic = ones( size( img ), 'logical' );
                        [x, x_p, y, x_dists] = find_stripe_locations( thetaD, img, pattern, img_dims );
                    else
                         bw_dic = bw_dic_stack(:,:,i);
                         bw_dic = imfill( bw_dic, 'holes' );
                        [x, x_p, y, x_dists] = find_stripe_locations( thetaD, img, pattern, img_dims, bw_dic );
                    end
                    
                    stripe_bw = ...
                        generate_stripe_bw( round(x_p), thetaD, img_dims, round(width_guess), bw_fluor  );
                    stripe_bw = and( stripe_bw, bw_dic );
                    
                    fluor_pix = img( stripe_bw );
                    nonfluor_pix = img( and( bw_dic, ~stripe_bw ) );
                    
                    fluor_mean = mean( double(fluor_pix) ); fluor_var = var( double(fluor_pix) );
                    bg_mean = mean( double(nonfluor_pix) ); bg_var = var( double(nonfluor_pix) );
                    
                    if( isnan( fluor_mean ) || isnan( fluor_var ) )
                        score = 0;
                    else
                        score = (fluor_mean - bg_mean);
                    end
                    set_analysis_stats( this, i, score, thetaD, width_guess, length(x) );
                else
                    this.Analysis.Fluorescence.stats(i).score = 0;
                    set_analysis_stats( this, i, 0, [], [], [] );
                end
            end
            [~, sorted_idx_score] = sort( [this.Analysis.Fluorescence.stats.score], 'descend' );
            [~, sorted_idx_mean] = sort( [this.Analysis.Fluorescence.stats.mean], 'descend' );
            
            for i = 1:length( sorted_idx_score )
                this.Analysis.Fluorescence.stats(sorted_idx_score(i)).score_rank = i;
                this.Analysis.Fluorescence.stats(sorted_idx_mean(i)).mean_rank = i;
            end
            
            
        end
        function get_pattern_orientation(this, img_dims)
            
           % *************************************
           % marker for a function that should be written 
           % ************************************ 
            
        end
        function simplified_fluorescence_eval(this)
            fluor_stack = im2double(this.Analysis.Fluorescence.img_stack);
            fluor_bw_stack = zeros( size( fluor_stack ), 'logical' );
            dic_bw_stack = this.Analysis.DIC.bw_stack;
            
            %             figure
            for i = 1:size( fluor_stack, 3 )
                
                img = fluor_stack(:,:,i);
                bw_img = threshold_fluor_img( img, 1000 );
                bw_cell_fluor = and( bw_img, dic_bw_stack(:,:,i) );
                bw_cell_bg = and( ~bw_img, dic_bw_stack(:,:,i) );
                
                fluor_mean = mean( img( dic_bw_stack(:,:,i) ) );
                fluor_var = var( img( bw_cell_fluor ) );
                bg_mean = mean( img( bw_cell_bg ) );
                bg_var = var( img( bw_cell_bg ) );
                
                if( isnan( fluor_mean ) || isnan( fluor_var ) )
                    score = 0;
                else
                    score = (fluor_mean - bg_mean);
                end
                this.Analysis.Fluorescence.stats(i).fluor_mean = fluor_mean;
                this.Analysis.Fluorescence.stats(i).fluor_var = fluor_var;
                this.Analysis.Fluorescence.stats(i).bg_mean = bg_mean;
                this.Analysis.Fluorescence.stats(i).bg_var = bg_var;
                this.Analysis.Fluorescence.stats(i).score = score;
%                 this.Analysis.Fluorescence.img_stats(i) = img_stats;
                fluor_bw_stack(:,:,i) = bw_cell_fluor;
            end
            this.Analysis.Fluorescence.bw_stack = fluor_bw_stack;
            
            [~, sorted_idx] = sort( [this.Analysis.Fluorescence.stats.score], 'descend' );
            
            for i = 1:length( sorted_idx )
                this.Analysis.Fluorescence.stats(i).rank = sorted_idx(i);
                this.Analysis.DIC.stack_cc.stats(i).rank = sorted_idx(i);
            end
        end
        function view_results(this)
            
            rank_vec = [this.Analysis.Fluorescence.stats.rank];
            
            [~,idx] = sort( rank_vec );
            
            this.Analysis.state_data.sorted_idx = idx;
            this.Analysis.state_data.current_idx = 1;
            
            update_analysis_eval_tab(this)            
        end
        function [x_scan, y_scan] = image_center_to_scan_center( this, x_img, y_img, numX, numY )
            % need to get pxSize here
            pxSize = 1;
            
            imgHeight = 1200*pxSize; imgWidth = 1200*pxSize;
            totalWidth = numX*imgWidth;
            totalHeight = numY*imgHeight;
            
            x_scan = double(x_img)*pxSize - totalWidth/2 + this.XYStageCtr(1);
            y_scan = double(y_img)*pxSize - totalHeight/2 + this.XYStageCtr(2);
            
        end
        function test_eval(this, dic_scan, fluor_scan, old_dims)
%             init_eval(this);
            dic_scan_type = class( dic_scan );
            fluor_scan_type = class( fluor_scan );
            img_dims = [600, 600];
            dic_scan = resize_scan(dic_scan, old_dims, img_dims);
            fluor_scan = resize_scan(fluor_scan, old_dims, img_dims);
            this.Acq.imgOV = dic_scan;
            
            eval_DIC_scan(this, img_dims);
            
            cc_stats = this.Analysis.DIC.scan_cc.stats;
            cc_stats = cc_stats( [cc_stats.keep_bool] );
            dic_stack = zeros( img_dims(1), img_dims(2), length(cc_stats), dic_scan_type );
            fluor_stack = zeros( img_dims(1), img_dims(2), length(cc_stats), fluor_scan_type );
            
            for i = 1:size(cc_stats)
                center_pt = round(cc_stats(i).BB_center);
                rows = [ center_pt(2)-img_dims(1)/2+1, center_pt(2)+img_dims(1)/2 ];
                cols = [ center_pt(1)-img_dims(2)/2+1, center_pt(1)+img_dims(2)/2 ];
                dic_stack(:,:,i) = extract_subimage( dic_scan, rows, cols );
                fluor_stack(:,:,i) = extract_subimage( fluor_scan, rows, cols );
            end
            set_DIC_stack( this, dic_stack );
%             this.Analysis.Fluorescence.img_stack = fluor_stack;
            set_fluorescence_stack( this, fluor_stack );
            scan_dims = size( dic_scan );
            eval_selected_images(this, img_dims, scan_dims, 1);
%             export_output(this);
%             view_results(this);
        end
        function get_ROI_images(this, x, y)
            
            img_dims = get_img_size(this);
            if( length(img_dims) == 1)
                img_dims = [img_dims, img_dims];
            end
            dic_stack = zeros( img_dims(1), img_dims(2), length(x) );
            fluor_stack = zeros( img_dims(1), img_dims(2), length(x) );
            
            for i = 1:length(x)
                set_xy_pos_micron(this.MICMAN,[x(idxPos) y(idxPos)]) %move stage
                pause(0.1) %delay for the auto-focus to adapt
                laser = get_laser(this);
                %%
                [dic_img,~] = snap_img_DIC(this);
                [fluor_img,~] = snap_img_DIC(this, fluor_img, laser );
                
                if get(this.GUI.hCheckFlatFieldCorr,'value')
                    dic_img = dic_img - this.Acq.ImgDicBg;
                end %if
                
                %                 idx = sub2ind([totalHeight,totalWidth],i(:),j(:));
                dic_stack(:,:,i) = dic_img;
                fluor_stack(:,:,i) = fluor_img;
                
            end %for

            set_fluorescence_stack(this, fluor_stack);
            set_DIC_stack(this, dic_stack);
        end
        function calculate_fluorstack_stats(this, stack)
           for i = 1:size( stack, 3)
               img = stack(:,:,i);
               this.Analysis.Fluorescence.stats(i).mean = mean( double( img(:) ) );
               this.Analysis.Fluorescence.stats(i).var = var( double( img(:) ) );
               this.Analysis.Fluorescence.stats(i).max = max( double( img(:) ) );
           end
        end
        function set_fluorescence_stack(this, stack)
            this.Analysis.Fluorescence.img_stack = stack;
            calculate_fluorstack_stats(this, stack);
        end
        function set_DIC_stack(this, stack)
            this.Analysis.DIC.img_stack = stack;
        end
        function init_eval(this)
           parent_dir = uigetdir( pwd ); 
           date_str = datestr(now, 'yyyymmdd');
           output_dir = strcat( parent_dir, '\', date_str );
           if( ~exist( output_dir, 'dir' ) )
               mkdir( output_dir  );
           end
           
           this.Analysis.output_dir = strcat( output_dir, '\' );
        end
        function export_output(this)
            fluor_stack = this.Analysis.Fluorescence.img_stack;
            fluor_bw_stack = this.Analysis.Fluorescence.bw_stack;
            dic_stack = this.Analysis.DIC.img_stack;
            dic_bw_stack = this.Analysis.DIC.bw_stack_eval;
            filepaths = cell( size( fluor_stack, 3 ), 2 );
            dic_scan = this.Acq.imgOV;
            
            rank_vec = [this.Analysis.Fluorescence.stats.rank];
            
            [~,idx] = sort( rank_vec );
            
            fluor_filestr = strcat( this.Analysis.output_dir, 'fluor_img_' );
            dic_filestr = strcat( this.Analysis.output_dir, 'dic_img_' );
            figure
            for i = 1:length(idx)
                temp_fluor = uint16(fluor_stack(:,:,idx(i)));
                temp_dic = uint16(dic_stack(:,:,idx(i)));
                filepaths{i,1} = strcat( fluor_filestr, sprintf('%04i', i), '.tiff' );
                filepaths{i,2} = strcat( dic_filestr, sprintf('%04i', i), '.tiff' );
                imwrite( temp_fluor, filepaths{i,1} );
                imwrite( temp_dic, filepaths{i,2} );
            end
            this.Analysis.filepaths = filepaths;
            imwrite( dic_scan, strcat( this.Analysis.output_dir, 'overview_scan.tiff' ) );
        end
        function update_analysis_eval_tab(this)
            
            idx = this.Analysis.state_data.sorted_idx(this.Analysis.state_data.current_idx);
            
            fluor_img = this.Analysis.Fluorescence.img_stack(:,:,idx);
            dic_img = this.Analysis.DIC.img_stack(:,:,idx);
            dic_img( bwperim( this.Analysis.DIC.bw_stack(:,:,idx) ) ) = max( dic_img(:) );
            
            set( this.GUI.hImg_bw, 'xdata', 1:size(dic_img, 2) );
                    set( this.GUI.hImg_bw, 'ydata', 1:size(dic_img, 1) );
                    set( this.GUI.hImg_bw, 'cdata', dic_img ); 
                    
            set( this.GUI.hImg_segged, 'xdata', 1:size(fluor_img, 2) );
            set( this.GUI.hImg_segged, 'ydata', 1:size(fluor_img, 1) );
            set( this.GUI.hImg_segged, 'cdata', imfill(fluor_img, 'holes' ) );
            
        end
        
        %% analysis testing callbacks
        
        function test_dic_segmentation(this, dic_scan, img_dims)
            
            if( ~exist('dic_scan', 'var') )
                test_overview_dic(this);
                dic_scan = this.Analysis.DIC.test.imgOV;
            else
                this.Analysis.DIC.test.imgOV = dic_scan;
            end
            if( ~exist( 'img_dims', 'var' ) )
                img_dims = get_img_size(this);
            end
            if( length(img_dims) == 1)
                img_dims = [img_dims, img_dims];
            end
            scan_dims = size( dic_scan );
            
            wind = this.Analysis.DIC.test.entropy_window;
            [bw_scan, cc, parameters, img_entropy] = ...
                process_and_label_DIC( dic_scan, img_dims, wind, scan_dims );
            
            this.Analysis.DIC.test.bw_img = bw_scan;
            this.Analysis.DIC.test.cc = cc;
            this.Analysis.DIC.test.model = parameters.type;
            this.Analysis.DIC.test.threshold = parameters.intensity_threshold;
            this.Analysis.DIC.test.img_entropy = img_entropy;
            update_threshold_slider(this, 'dic');
            update_analysis_tabview(this, 'dic');
            
        end
        function test_fluorescence_eval(this, img )
           
            
            
            
            
        end
        function update_analysis_tabview(this, mode)
            switch mode
                case 'dic'
                    img_bw = this.Analysis.DIC.test.bw_img;
                    img_OV = this.Analysis.DIC.test.imgOV;
                    img_OV( bwperim( imfill( img_bw, 'holes' ) ) ) = max( img_OV(:) );
                    
  
                    set( this.GUI.hImg_bw, 'xdata', 1:size(img_bw, 2) );
                    set( this.GUI.hImg_bw, 'ydata', 1:size(img_bw, 1) );
                    set( this.GUI.hImg_bw, 'cdata', imfill( img_bw, 'holes' ) );
                    
                    set( this.GUI.hImg_segged, 'xdata', 1:size(img_OV, 2) );
                    set( this.GUI.hImg_segged, 'ydata', 1:size(img_OV, 1) );
                    set( this.GUI.hImg_segged, 'cdata', img_OV ); 
                    
                    hist( this.Analysis.DIC.test.img_entropy(:), 100,...
                                'Parent', this.GUI.hAx_histogram,...
                                'XLabel', 'entropy intensity');
                            
                case 'full_eval'
                otherwise
                    
            end
            
        end
        function update_threshold_slider(this, mode)
            switch mode
                case 'dic'
                    set( this.GUI.hSlid_threshold, 'Min', min( this.Analysis.DIC.test.img_entropy(:) ) );
                    set( this.GUI.hSlid_threshold, 'Max', max( this.Analysis.DIC.test.img_entropy(:) ) );
                    set( this.GUI.hSlid_threshold, 'Value', this.Analysis.DIC.test.threshold );
                otherwise
                    
            end
        end
        function set_dic_clustering_model(this)
             this.Analysis.parameter.model.type = this.Analysis.DIC.test.model;
             switch this.Analysis.parameter.model.type  
                 case 'otzu'
                     this.Analysis.parameter.model.threshold = this.Analysis.DIC.test.threshold;
                 case 'gmm'
                     this.Analysis.parameter.model.gmm = this.Analysis.DIC.test.gmm;
                 otherwise
                     error('unknown model type specified')
             end
        end
        function update_threshold(this, mode)
            
            size_thresh = 10000;
            switch mode
                case 'dic'
                    this.Analysis.DIC.test.threshold = get( this.GUI.hSlid_threshold, 'Value' );
                    bw_img = imbinarize( this.Analysis.DIC.test.img_entropy,...
                                                        this.Analysis.DIC.test.threshold );
                    cc = bwconncomp(bw_img);
                    if( exist('size_thresh', 'var') && ~isempty(size_thresh) )
                        bSmall = cellfun(@(x)(length(x) < size_thresh), cc.PixelIdxList);
                        bw_img(vertcat(cc.PixelIdxList{bSmall})) = 0;
                    end
                    this.Analysis.DIC.test.bw_img = bw_img;
                otherwise
            end
                                            
            update_analysis_tabview(this, mode);
            
        end
        function [stats, labels] = label_connected_components(this, dic_scan, img_dims)
            if( ~exist( 'dic_scan', 'var' ) )
                dic_scan = this.Acq.imgOV;
                img_dims = get_img_size(this);
            end
            if( length(img_dims)==1 )
               img_dims = [img_dims, img_dims]; 
            end
            
            wind = this.Analysis.parameters.entropy_window;
            
            [bw_scan, cc, parameters, ent_smooth] = ...
                process_and_label_DIC( dic_scan, img_dims, wind );
            
            for i = 1:length( cc )
                
                
                
            end
            
        end
        function update_image(this, source)
           
            
            
            
        end
        
    end %methods
end %classdef